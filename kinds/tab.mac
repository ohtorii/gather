/* tab
*/

#g_dll_ohtorii_tools=val(getarg(30));
$label=getarg(0);
$arg=getarg(1);
call $label, $arg;
endmacro $$return;


do_action:
	$$action=$$1;
	call $$action;
	return $$return;

preview:
	##current_hidemaru	= hidemaruhandle(0);
	##first_item_index	= 0;
	##not_found 		= 0;

	//ウインドウを切り替える
	##hidemaru_handle=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionActionWindowHandle",##first_item_index);
	if(##hidemaru_handle!=##not_found){
		call GetSleepTime;
		##sleep_time=##return;

		setactivehidemaru ##hidemaru_handle;
		//少し待つ
		sleep ##sleep_time;
		//元のウインドウに切り替える
		setactivehidemaru ##current_hidemaru;
	}
	return "1";


GetSleepTime:
	$$root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
	$$ini_filename=$$root_macro_directory+"\\config.ini";
	##milli_sec=getininumw($$ini_filename,"action", "sleep");
	if(##milli_sec < 0){
		##milli_sec=0;
	}
	return ##milli_sec;

//#region jump
//////////////////////////////////////////////////////////////////////////////
//	jump	(tabとwindow両モードで共通の処理)
//////////////////////////////////////////////////////////////////////////////
jump:
	##first_item_index	= 0;
	##hidemaru_handle=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionActionWindowHandle",##first_item_index);
	##ret = dllfuncw(#g_dll_ohtorii_tools,"AppendCallBack_ProcessFinish",currentmacrofilename,"callback_jump",str(##hidemaru_handle));
	return str(##ret);


callback_jump:
	##handle=val($$1);
	setactivehidemaru ##handle;
	return str(##return);

//#endregion


//#region only
//////////////////////////////////////////////////////////////////////////////
//	only
//////////////////////////////////////////////////////////////////////////////
only:
	call make_callback_args;
	##ret = dllfuncw(#g_dll_ohtorii_tools,"AppendCallBack_ProcessFinish",currentmacrofilename,"callback_only",$$return);
	return str(##ret);

callback_only:
	##current_hidemaru = hidemaruhandle(0);

	//ウインドウハンドルはタブ区切りの文字列で格納されているため分解する
	#g_num_alive_window_handle = split($$window_str_handles, $$1, "\t" );
	#g_alive_window_handle[0]  = 0;
	//閉じないウインドウハンドルを取得する
	##i=0;
	while(##i<#g_num_alive_window_handle){
		#g_alive_window_handle[##i]=val($$window_str_handles[##i]);
		##i = ##i + 1;
	}

	//閉じるウインドウに自分自身が含まれていると閉じることが出来ないため
	//適切な別のウインドウにフォーカスを移す。
	call contain_alive_window ##current_hidemaru;
	if(! ##return){
		//生き残るウインドウにフォーカスを移す
		setactivehidemaru #g_alive_window_handle[0];
	}

	//閉じるウインドウハンドルを集める
	##count_close_window_handles=0;
	##close_window_handles[0]=0;
	##i=0;
	while(##i<hidemarucount){
		##h=hidemaruhandle(##i);
		call contain_alive_window ##h;
		if(##return){
			//生き残るウインドウに含まれているため何もしない
		}else{
			if(updated[##h]){
				//ファイルが更新されているため無視する。（ユーザーが明示的に閉じる）
			}else{
				##close_window_handles[##count_close_window_handles] = ##h;
				##count_close_window_handles = ##count_close_window_handles + 1;
			}
		}

		##i = ##i + 1;
	}

	//ウインドウを閉じる
	##i=0;
	while(##i<##count_close_window_handles){
		closehidemaru ##close_window_handles[##i];

		##i = ##i + 1;
	}

	return "1";


contain_alive_window:
	##current_hidemaru=##1;
	##i=0;
	while(##i<#g_num_alive_window_handle){
		if(##current_hidemaru==#g_alive_window_handle[##i]){
			//生き残るウインドウに含まれている
			return true;
		}

		##i = ##i + 1;
	}
	//生き残るウインドウに含まれていない
	return false;



//#endregion

//////////////////////////////////////////////////////////////////////////////
//	close	(tabとwindowで別々の処理を行う)
//////////////////////////////////////////////////////////////////////////////
//#region close
close:
	call make_callback_args;
	##ret = dllfuncw(#g_dll_ohtorii_tools,"AppendCallBack_ProcessFinish",currentmacrofilename,"callback_close",$$return);
	return str(##ret);


callback_close:
	##current_hidemaru = hidemaruhandle(0);

	//ウインドウハンドルはタブ区切りの文字列で格納されているため分解する
	#g_num_close_window_handle = split($$window_str_handles, $$1, "\t" );
	#g_close_window_handle[0]  = 0;
	//閉じるウインドウハンドルを取得する
	##i=0;
	while(##i<#g_num_close_window_handle){
		#g_close_window_handle[##i]=val($$window_str_handles[##i]);
		##i = ##i + 1;
	}

	//閉じるウインドウに自分自身が含まれていると閉じることが出来ないため
	//適切な別のウインドウにフォーカスを移す。
	call contain_window_handle ##current_hidemaru;
	if(##return){
		call find_window_handle;
		##next_handle = ##return;
		if(##next_handle != -1){
			setactivehidemaru ##next_handle;
		}
	}

	//ウインドウを閉じる
	##i=0;
	while(##i<#g_num_close_window_handle){
		##h=#g_close_window_handle[##i];
		if(updated[##h]){
			//ファイルが更新されているため無視する。（ユーザーが明示的に閉じる）
		}else{
			closehidemaru ##h;
		}
		##i = ##i + 1;
	}
	return "1";

//引数##1がタブグループに含まれているか調べる
contain_window_handle:
	##handle=##1;
	##i=0;
	while(##i<#g_num_close_window_handle){
		if(##handle==#g_close_window_handle[##i]){
			//閉じるウインドウに含まれている
			return true;
		}
		##i = ##i + 1;
	}
	return false;

//閉じるウインドウに含まれないウインドウハンドルを見付ける
find_window_handle:
	##i=0;
	while(##i<hidemarucount){
		##handle=hidemaruhandle(##i);
		call contain_window_handle ##handle;
		if(! ##return){
			//閉じるウインドウ一覧に含まれないハンドルを返す
			return ##handle;
		}
		##i = ##i + 1;
	}
	return -1;

//#endregion
//#endregion




//#region 共通ルーチン
//////////////////////////////////////////////////////////////////////////////
//	共通ルーチン
//////////////////////////////////////////////////////////////////////////////
make_callback_args:
	$$args="";
	##count=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount");
	##i=0;
	while(##i<##count){
		##top_window_handle=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionActionWindowHandle",##i);
		//引数をタブ文字で連結する
		if(##i==0){
			$$args=str(##top_window_handle);
		}else{
			$$args=$$args+"\t"+str(##top_window_handle);
		}

		##i = ##i + 1;
	}
	return $$args;


//#endregion
