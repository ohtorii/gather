/**/

////////////////////////////////////////////////////////////////////////////
//	グローバル変数
//////////////////////////////////////////////////////////////////////////
$g_separator="\x0B";	//垂直タブ
$g_marker="#layer0";


////////////////////////////////////////////////////////////////////////////
//	メイン処理
////////////////////////////////////////////////////////////////////////////
#g_dll_ohtorii_tools=val(getarg(30));
$label=getarg(0);
$arg1=getarg(1);
$arg2=getarg(2);
$arg3=getarg(3);
$arg4=getarg(4);
$arg5=getarg(5);

$g_root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");


call $label, $arg1, $arg2, $arg3, $arg4, $arg5 ;
endmacro $$return;



////////////////////////////////////////////////////////////////////////////
//	Request.
////////////////////////////////////////////////////////////////////////////
/*
実装	アクション
○		function! s:kind.action_table.open.func(candidates) abort "{{{
○		function! s:kind.action_table.preview.func(candidate) abort "{{{
		function! s:kind.action_table.mkdir.func(candidate) abort "{{{
		function! s:kind.action_table.rename.func(candidates) abort "{{{
		function! s:kind.action_table.backup.func(candidates) abort "{{{
		function! s:kind.action_table.read.func(candidates) abort "{{{
		function! s:kind.action_table.wunix.func(candidates) abort "{{{
		function! s:kind.action_table.diff.func(candidates) abort "{{{
		function! s:kind.action_table.dirdiff.func(candidates) abort "{{{
		function! s:kind.action_table.grep.func(candidates) abort "{{{
		function! s:kind.action_table.vimgrep.func(candidates) abort "{{{
		function! s:kind.action_table.find.func(candidate) abort "{{{
		function! s:kind.action_table.argadd.func(candidates) abort "{{{

*/

do_action:
	$$action=$$1;
	call $$action;
	return $$return;

////////////////////////////////////////////////////////////////////////////
//	Action.
////////////////////////////////////////////////////////////////////////////
open:
	##new_hidemaru_handle=0;
	##current_hidemaru_handle=hidemaruhandle(0);
	##count=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount");
	##i=0;
	while(##i < ##count){
		$$text=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionActionFileName",##i);
		if($$text!=""){
			if(existfile($$text)){
				if((existfile($$text,1)&0x00000010) == 0){
					//パスが存在している、かつ、ファイルである
					openfile $$text;
					##new_hidemaru_handle = hidemaruhandle(0);
					setactivehidemaru(##current_hidemaru_handle);
				}
			}
		}

		##i = ##i + 1;
	}
	##ret = dllfuncw(#g_dll_ohtorii_tools,"StaticStatusSetHidemaruHandleToForceAtEndProcess",##new_hidemaru_handle);

	return "1";


insert_directory:
	execmacro $g_root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "insert_directory_proc";
	return getresultex(-1);


overwrite_directory:
	execmacro $g_root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "overwrite_directory_proc";
	return getresultex(-1);


preview:
	##first_item_index	= 0;
	$$filename=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionActionFileName",##first_item_index);
	##ret=dllfuncw(#g_dll_ohtorii_tools, "AutoPreviewRegist", $$filename);
	return "1";

////////////////////////////////////////////////////////////////////////////
//	Proc.
////////////////////////////////////////////////////////////////////////////
overwrite_directory_proc:
	if((strstr($$2,"\\")!=-1) || (strstr($$2,"/")!=-1)){
		//ディレクトリ区切りあり
		execmacro $g_root_macro_directory+"\\internal\\util_get_parent_folder_name.mac",$$2;
		$$parent_folder=getresultex(-1);
		insert($$parent_folder);
	}else{
		//ディレクトリ区切りなし
		overwrite($$2);
	}
	return ;


insert_directory_proc:
	if((strstr($$2,"\\")!=-1) || (strstr($$2,"/")!=-1)){
		//ディレクトリ区切りあり
		execmacro $g_root_macro_directory+"\\internal\\util_get_parent_folder_name.mac",$$2;
		$$parent_folder=getresultex(-1);
		insert($$parent_folder);
	}else{
		//ディレクトリ区切りなし
		insert($$2);
	}
	return ;

