/* common.

(引数)
	リクエスト	...

（説明）
	第二引数以降はリクエストの種類にり異なります。


（リクエストの種類）
	- get_property
	- do_action

（リクエスト毎の引数）
	- get_property
		[0]	ohtorii_tools_dll_handle
		[1] "get_property"

	- do_action
		[0]	ohtorii_tools_dll_handle
		[1]	"do_action"
		[2]	アクション名
*/

#g_dll_ohtorii_tools=val(getarg(0));
$label=getarg(1);
$arg=getarg(2);
call $label, $arg;
endmacro $$return;



////////////////////////////////////////////////////////////////////////////
//	Request.
////////////////////////////////////////////////////////////////////////////
get_property:
	return R"([property]
name=common
description=common actions.
default_action=append
'継承するアクション（空白区切り）
base_kind=

'アクション(action.より右側の文字（nop）はメニュー表示で使用する名前)
[action.nop]
'秀丸マクロのラベル名
function=nop
'アクションの説明
description=Do nothing.
'アクション実行後に終了するかどうか
is_quit=false
'アクションは複数選択に対して実行可能か
is_multi_selectable=true

[action.yank]
function=yank
description=Yank the candidate "word" or "action__text".
is_multi_selectable=true

[action.yank_escape]
function=yank_escape
description=Yank the escaped candidate "word" or "action__text".

[action.insert]
function=insert
description=Insert the candidate word or text before the cursor.

[action.append]
function=append
description=Insert the candidate word or text after the cursor.

[action.insert_directory]
function=insert_directory
description=Insert the candidate directory before the cursor.

[action.append_directory]
function=append_directory
description=Insert the candidate directory after the cursor.

[action.preview]
function=preview
description=Preview the candidate text.
is_quit=false
is_multi_selectable=false

[action.echo]
function=echo
description=Echo candidates for debug.
is_quit=false
)";

/*対応する動作無し
ex	Input the escaped candidate text into command line.
*/



do_action:
	$$action=$$1;
	call $$action;
	return $$return;


////////////////////////////////////////////////////////////////////////////
//	Action.
////////////////////////////////////////////////////////////////////////////
nop:
	return "1";

append:
	begingroupundo;
	##count=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount");
	##i=0;
	while(##i < ##count){
		$$text=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionText",##i);
		if(1<=##i){
			insertreturn;
		}
		insert($$text);
		##i = ##i + 1;
	}
	endgroupundo;
	return "1";

echo:
	//debug用途
	##output_dll=loaddll("HmOutputPane.dll");
	if(!result){
		return "0";
	}

	//アウトプット枠クリア
	##h=dllfunc(##output_dll,"GetWindowHandle",hidemaruhandle(0));
	##ret=sendmessage(##h,0x111/*WM_COMMAND*/,1009,0);//1009=クリア

	//文字列を表示する
	##count=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount");
	##i=0;
	while(##i<##count){
		$$source_name	=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionSourceName",	##i);
		$$text			=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionText",		##i);
		$$description	=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionDescription",##i);

		##ret=dllfunc(##output_dll,"Output",hidemaruhandle(0),sprintf("[%d/%d] (%s) %s %s\n",##i+1,##count,$$source_name,$$text,$$description));
		##i = ##i + 1;
	}
	freedll ##output_dll;
	return "1";

ex:
	return  "1";

insert:
	begingroupundo;
	##count=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount");
	##i=0;
	while(##i < ##count){
		$$text=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionText",##i);
		if(1<=##i){
			insertreturn;
		}
		insertfix($$text);
		##i = ##i + 1;
	}
	endgroupundo;
	return "1";

append_directory:
	/*call FileListToDirectoryList;
	if(! ##return){
		return ;
	}
	call append;*/
	return  "1";

insert_directory:
	/*call FileListToDirectoryList;
	if(! ##return){
		return ;
	}
	call insert;*/
	return  "1";

preview:
	//debug用途
	##output_dll=loaddll("HmOutputPane.dll");
	if(!result){
		return "0";
	}

	//アウトプット枠クリア
	##h=dllfunc(##output_dll,"GetWindowHandle",hidemaruhandle(0));
	##ret=sendmessage(##h,0x111/*WM_COMMAND*/,1009,0);//1009=クリア

	//文字列を表示する
	##count=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount");
	##i=0;
	while(##i<##count){
		$$text=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionText",##i);
		##ret=dllfunc(##output_dll,"Output",hidemaruhandle(0),$$text);
		##i = ##i + 1;
	}
	freedll ##output_dll;
	return "1";


yank:
	/*call MakeClipboardString;
	setclipboard $$return;*/
	return  "1";

yank_escape:
	/*call MakeClipboardString;
	setclipboard quote($$return);*/
	return  "1";




////////////////////////////////////////////////////////////////////////////
//	Utility.
////////////////////////////////////////////////////////////////////////////
MakeFileList:
	#g_filelist_num=val(getarg(10));
	##i=0;
	while(##i<#g_filelist_num){
		$g_filelist[##i]=getarg(11+##i);
		##i = ##i + 1;
	}
	return ;


MakeClipboardString:
	$$str="";
	##i=0;
	while(##i<#g_filelist_num){
		if(1<=##i){
			$$str = $$str + "\x0D\x0A";
		}
		$$str = $$str + $g_filelist[##i];
		##i = ##i + 1;
	}
	return $$str;


LoadDll:
	##dll=loaddll(macrodir+"\\"+$$1);
	if(##dll!=0){
		return ##dll;
	}
	##dll=loaddll(hidemarudir+"\\"+$$1);
	return ##dll;


SplitFilelist:
	/* ファイルリストをグローバル変数に格納します。

	（格納先のグローバル変数）
	$g_filelist;		//ファイル名
	#g_filelist_num;	//ファイル名の個数
	*/

	call LoadDll "DengakuDLL.dll";
	if(##return==0){
		return false;
	}
	##dll=##return;

	#g_filelist_num=0;
	$$token = dllfuncstr(##dll,"GETTOKEN",$$1,"\t");
	while (1) {
		if($$token != ""){
			$g_filelist[#g_filelist_num] = $$token;
			#g_filelist_num = #g_filelist_num + 1;
		}
		if (dllfunc(##dll,"HASMORETOKENS") == 0) {
			break;
		}
		$$token = dllfuncstr(##dll,"GETTOKEN","","\t");
	}
	freedll ##dll;

	if(#g_filelist_num==0){
		return false;
	}
	return true;


FileListToDirectoryList:
	/* ファイルリストをディレクトリリストへ変更する
	*/
	call LoadDll "ht_tools.dll";
	if(##return==0){
		return false;
	}
	##dll=##return;
	##i=0;
	while(##i<#g_filelist_num){
		$$dir = dllfuncstr(##dll, "GetParentFolder", $g_filelist[##i]);
		$g_filelist[##i]=$$dir;
		##i = ##i + 1;
	}
	freedll ##dll;
	return true;
