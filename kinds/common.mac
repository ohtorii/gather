/* common.

(引数)
	リクエスト	...

（説明）
	第二引数以降はリクエストの種類にり異なります。


（リクエストの種類）
	- get_property
	- do_action

（リクエスト毎の引数）
	- get_property
		[0]	ohtorii_tools_dll_handle
		[1] "get_property"

	- do_action
		[0]	ohtorii_tools_dll_handle
		[1]	"do_action"
		[2]	アクション名
*/


////////////////////////////////////////////////////////////////////////////
//	グローバル変数
////////////////////////////////////////////////////////////////////////////
#g_dll_ohtorii_tools=0;
#g_dll_output_panel	=0;


////////////////////////////////////////////////////////////////////////////
//	メイン処理
////////////////////////////////////////////////////////////////////////////
#g_dll_ohtorii_tools=val(getarg(30));
$label=getarg(0);
$arg1=getarg(1);
$arg2=getarg(2);
$arg3=getarg(3);
$arg4=getarg(4);
$arg5=getarg(5);

debuginfo "kinds/commonm.mac";
debuginfo "  #g_dll_ohtorii_tools="+getarg(30);
$g_root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");
debuginfo "  -> OK";

call $label, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6;
endmacro $$return;



////////////////////////////////////////////////////////////////////////////
//	Request.
////////////////////////////////////////////////////////////////////////////
/*Todo コマンドラインのマクロと組み合わせる
ex	Input the escaped candidate text into command line.
*/



do_action:
	$$action=$$1;
	call $$action;
	return $$return;


////////////////////////////////////////////////////////////////////////////
//	Action.
////////////////////////////////////////////////////////////////////////////
nop:
	return "1";

echo:
	/* 候補の詳細をアウトプット枠へ表示する(debug用途)
	*/
	##output_dll=loaddll("HmOutputPane.dll");
	if(!result){
		return "0";
	}

	//アウトプット枠クリア
	##h=dllfunc(##output_dll,"GetWindowHandle",hidemaruhandle(0));
	##ret=sendmessage(##h,0x111/*WM_COMMAND*/,1009,0);//1009=クリア

    $$format = R"([%d/%d] {"text":"%s", "source_name":"%s", "action_directory_name":"%s", "action_file_name":"%s", "action_command":"%s", "action_window_handle":%d, "action_line":%d, "action_column":%d, "description":"%s"})" + "\r\n";

	//選択された候補数(##count)を取得する
	##count=dllfuncw(#g_dll_ohtorii_tools,"GetSelectionCount");

	##i    =0;
	while(##i < ##count){
        //候補の情報を取得する
        $$source_name           =dllfuncstrw(#g_dll_ohtorii_tools, "GetSelectionSourceName"         , ##i);
        $$text                  =dllfuncstrw(#g_dll_ohtorii_tools, "GetSelectionText"               , ##i);
        $$action_directory_name =dllfuncstrw(#g_dll_ohtorii_tools, "GetSelectionActionDirectoryName", ##i);
        $$action_file_name      =dllfuncstrw(#g_dll_ohtorii_tools, "GetSelectionActionFileName"     , ##i);
        $$action_command        =dllfuncstrw(#g_dll_ohtorii_tools, "GetSelectionActionCommand"      , ##i);
        ##window_handle         =dllfuncw(   #g_dll_ohtorii_tools, "GetSelectionActionWindowHandle" , ##i);
        ##line                  =dllfuncw(   #g_dll_ohtorii_tools, "GetSelectionActionLine"         , ##i);
        ##column                =dllfuncw(   #g_dll_ohtorii_tools, "GetSelectionActionColumn"       , ##i);
        $$description           =dllfuncstrw(#g_dll_ohtorii_tools, "GetSelectionDescription"        , ##i);

        //候補の情報を文字列($$info)にする
        $$info=sprintf($$format
                , ##i + 1
                , ##count
                , $$text
                , $$source_name
                , $$action_directory_name
                , $$action_file_name
                , $$action_command
                , ##window_handle
                , ##line
                , ##column
                , $$description);
        //アウトプット枠へ$$infoを表示する
        ##ret=dllfunc(##output_dll,"Output",hidemaruhandle(0),$$info);

        ##i = ##i + 1;
    }
    freedll ##output_dll;
    return "1";

/*ex:
	return  "1";*/

insert:
	execmacro $g_root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "insert_proc";
	return getresultex(-1);


overwrite:
	execmacro $g_root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "overwrite_proc";
	return getresultex(-1);


preview:
	//debug用途
	if(#g_dll_output_panel==0){
		#g_dll_output_panel=loaddll("HmOutputPane.dll");
		if(#g_dll_output_panel==0){
			return "0";
		}
	}

	//アウトプット枠クリア
	##h=dllfunc(#g_dll_output_panel,"GetWindowHandle",hidemaruhandle(0));
	##ret=sendmessage(##h,0x111/*WM_COMMAND*/,1009,0);//1009=クリア
	execmacro $g_root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "preview_proc";
	$$ret=getresultex(-1);
	freedll #g_dll_output_panel;
	#g_dll_output_panel=0;
	return $$ret;


yank:
	setclipboard "";
	execmacro $g_root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "yank_proc";
	return getresultex(-1);


yank_escape:
	setclipboard "";
	execmacro $g_root_macro_directory+"\\internal\\util_foreach_join.mac", str(#g_dll_ohtorii_tools), currentmacrofilename, "yank_escape_proc";
	return getresultex(-1);


////////////////////////////////////////////////////////////////////////////
//	Proc.
////////////////////////////////////////////////////////////////////////////
insert_proc:
	insert($$2);
	return;

overwrite_proc:
	overwrite($$2);
	return;

preview_proc:
	##is_separetor = ##1;
	if(#g_dll_output_panel==0){
		#g_dll_output_panel=loaddll("HmOutputPane.dll");
		if(#g_dll_output_panel==0){
			return "0";
		}
	}
	if(##is_separetor){
		##ret=dllfunc(#g_dll_output_panel,"Output",hidemaruhandle(0),"\r\n");
	}else{
		##ret=dllfunc(#g_dll_output_panel,"Output",hidemaruhandle(0),$$2);
	}
	freedll #g_dll_output_panel;
	#g_dll_output_panel=0;
	return ;


yank_proc:
	##is_separetor = val($$1);
	if(##is_separetor){
		addclipboard "\x0D\x0A";
	}else{
		addclipboard $$2;
	}
	return ;


yank_escape_proc:
	##is_separetor = val($$1);
	if(##is_separetor){
		addclipboard "\x0D\x0A";
	}else{
		call EscapeC $$2;
		addclipboard $$return;
	}
	return ;


////////////////////////////////////////////////////////////////////////////
//	Utility.
////////////////////////////////////////////////////////////////////////////
EscapeC:
	//
	//C言語のエスケープ文字
	//
	$$text=$$1;

	/* Debug
	$$text=$$text+"\"\x07\x08\x0b\x0c\t\n\r";
	*/

	##hmjre_dll=loaddll("HmJre.dll");
	##dummy = dllfunc(##hmjre_dll,"SetUnicodeIndexAutoConvert", 1);
	##dummy = dllfunc(##hmjre_dll,"NotifyEncode", encode);

	//\ -> \\
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(\\)", $$text,0,R"(\\\\)",2);
	//" -> \"
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(")", $$text,0, R"(\\")",2);
	/*$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", "\x00", $$text,0, R"(\\0)", 2);//x00
	debuginfo "@3 $$text="+$$text;*/
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(\x07)", $$text,0, R"(\\a)", 2);//x07
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(\x08)", $$text,0, R"(\\b)", 2);//x08
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(\t)",   $$text,0, R"(\\t)", 2);//x09
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(\n)",   $$text,0, R"(\\n)", 2);//x0a
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(\x0b)", $$text,0, R"(\\v)", 2);//x0b
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(\x0c)", $$text,0, R"(\\f)", 2);//x0c
	$$text = dllfuncstr(##hmjre_dll,"ReplaceRegular", R"(\r)",   $$text,0, R"(\\r)", 2);//x0d
	freedll ##hmjre_dll;

	return $$text;
