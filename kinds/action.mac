/*アクションの実行
*/
#g_target_hidemaruhandle=val(getstaticvariable("$unity.g_target_hidemaruhandle",1));
$g_root_macro_directory =getstaticvariable("$unity.g_root_macro_directory", 1);

#g_dll_ohtorii_tools=val(getarg(0));
$label				=getarg(1);
$arg				=getarg(2);
call $label, $arg;
endmacro $$return;



////////////////////////////////////////////////////////////////////////////
//	Request.
////////////////////////////////////////////////////////////////////////////
get_property:
	return R"([property]
name=action
description=Do action.
default_action=do
base_kind=

'アクション
[action.do]
'表示に使用する名前
name=do
'秀丸マクロのラベル名
function=do
'アクションの説明
'description=Do.
'アクション実行後に終了するかどうか
'is_quit=false
'アクションを複数選択に対して実行するかどうか
is_multi_selectable=false
)";

do_action:
	$$action=$$1;
	call $$action;
	return $$return;

do:
	debuginfo 1;
	debuginfo "kinds/action.mac";
	/////////////////////////////////////////////////////////////////////////
	//アクションを取得する
	/////////////////////////////////////////////////////////////////////////
	##candidate_index=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchGetFirstSelectionCandidateIndex");
	if(##candidate_index==-1){
		debuginfo "  do -> false @ 0";
		return "0";
	}
	$$source_name	=dllfuncstrw(#g_dll_ohtorii_tools,"CandidatesGetSourceName",	##candidate_index);
	$$action_name	=dllfuncstrw(#g_dll_ohtorii_tools,"CandidatesGetText",			##candidate_index);
	$$user_data_kind=dllfuncstrw(#g_dll_ohtorii_tools,"CandidatesGetUserDataString",##candidate_index,"__kind__","");
	$$default_kind	=dllfuncstrw(#g_dll_ohtorii_tools,"SourcesGetDefaultKind",		$$source_name);
	
	$$kind_filename=$g_root_macro_directory+"\\kinds\\"+$$user_data_kind+".mac";
	
	
	/////////////////////////////////////////////////////////////////////////
	//選択ファイルに対してアクションを実行する
	/////////////////////////////////////////////////////////////////////////
	//選択ファイルを取得するためにコンテキストを１つ戻す（オブジェクトは破棄しない）
	##exist_context_then_delete=false;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"PopContext", ##exist_context_then_delete);
	if(! ##ret){
		debuginfo "  do -> false @ 1";
		return "0";
	}
	
	debuginfo "  exec_action start.";
	call exec_action, $$kind_filename, $$action_name;
	$$action_result=$$return;
	debuginfo "  exec_action finish.";
	
	//コンテキストを元に戻す
	##ret=dllfuncw(#g_dll_ohtorii_tools,"PushContext", ##exist_context_then_delete);
	if(! ##ret){
		debuginfo "  do -> false @ 2";
		return "0";
	}
	
	debuginfo "  IsQuit start.";
	call IsQuit $$user_data_kind;
	##is_quit = ##return;
	debuginfo "  IsQuit finish.";
	
	setstaticvariable "$unity.is_quit", str(##is_quit),0;
	debuginfo "  do -> true";
	return $$action_result;


exec_action:
	debuginfo "kinds/action.mac exec_action";
	$$kind_filename	=$$1;
	$$action_name	=$$2;
	
	execmacro $g_root_macro_directory+"\\internal\\create_temp_file.mac";
	$$serialize_filename=getresultex(-1);
	if($$serialize_filename==""){
		debuginfo "  exec_action-> false";
		return "0";
	}
	##ret=dllfuncw(#g_dll_ohtorii_tools,"FileRegistAfterDeleteFile",$$serialize_filename);
	if(! ##ret){
		debuginfo "  exec_action-> false";
		return "0";
	}
	
	//現在のコンテキストをserializeする
	##ret=dllfuncw(#g_dll_ohtorii_tools,"SerializeCurrentContext", $$serialize_filename);
	if(! ##ret){
		debuginfo "  exec_action-> false";
		return "0";
	}
	
	//操作対象となる秀丸エディタへ切り替える
	##current_hidemaruhandle=hidemaruhandle(0);
	setactivehidemaru(#g_target_hidemaruhandle);
	
	debuginfo "  ##current_hidemaruhandle="+str(##current_hidemaruhandle);
	debuginfo "  #g_target_hidemaruhandle="+str(#g_target_hidemaruhandle);
	
	//切り替えた秀丸エディタへohtorii_toolsを読み込む
	call LoadDll;
	##dll_ohtorii_tools=##return;
	if(##dll_ohtorii_tools==0){
		//元の秀丸エディタへ切り替える
		setactivehidemaru(##current_hidemaruhandle);
		debuginfo "  exec_action-> false";
		return "0";
	}
	//deserialize
	##ret=dllfuncw(##dll_ohtorii_tools,"DeSerializeToCurrentContext", $$serialize_filename);
	if(! ##ret){
		//元の秀丸エディタへ切り替える
		setactivehidemaru(##current_hidemaruhandle);
		debuginfo "  exec_action-> false";
		return "0";
	}
	
	debuginfo "  $$kind_filename="+$$kind_filename;
	debuginfo "  $$action_name="+$$action_name;
	execmacro $$kind_filename, str(##dll_ohtorii_tools), "do_action", $$action_name;
	$$action_result = getresultex(-1);

	//ohtorii_toolsを破棄する
	call FreeDll ##dll_ohtorii_tools;
	
	//元の秀丸エディタへ切り替える
	setactivehidemaru(##current_hidemaruhandle);
	debuginfo "  exec_action-> true";
	return $$action_result;
	

IsQuit:
	$$default_kind = $$1;
	##kind_index	=dllfuncw(#g_dll_ohtorii_tools, 	"KindsFindKindIndex",	$$default_kind);
	$$default_action=dllfuncstrw(#g_dll_ohtorii_tools,	"KindGetDefaultAction", ##kind_index);
	##action_index	=dllfuncw(#g_dll_ohtorii_tools, 	"KindsFindActionIndex", ##kind_index, $$default_action);
	##is_quit		=dllfuncw(#g_dll_ohtorii_tools, 	"KindsIsActionQuit",	##kind_index,##action_index);
	return ##is_quit;

LoadDll:
	if(platform&0x00080000){
		##dll_ohtorii_tools = loaddll($g_root_macro_directory + "\\dll\\ohtorii_tools_x64.dll");
	}else{
		##dll_ohtorii_tools = loaddll($g_root_macro_directory + "\\dll\\ohtorii_tools_x86.dll");
	}
	if (##dll_ohtorii_tools==0) {
		message "dll\\ohtorii_tools.dllのロードに失敗しました";
		return 0;
	}
	return ##dll_ohtorii_tools;

FreeDll:
	##dll_ohtorii_tools=##1;
	if(##dll_ohtorii_tools!=0){
		freedll ##dll_ohtorii_tools;
		##dll_ohtorii_tools=0;
	}
	return;
