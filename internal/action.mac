/* アクションから候補を取得する

引数	[0]		ohtorii_tools_dll_handle
		[1]		hm_process
		[20]	ラベル名(""==main)
		[21]		引数1
		[22]		引数2
		[23]		引数3
		[24]		引数4
		[25]		引数5
		[30]	action_name	(default="")
				実行したいアクション名。(例 "preview","echo",...)

返値	成功	"1"
		失敗	"0"
*/


//==========================================================================
//グローバル変数
//==========================================================================
#g_dll_ohtorii_tools	=val(getarg(0));
#g_dll_hm_process		=val(getarg(1));
$g_label_name			=getarg(20);
$g_do_action_name		=getarg(30);

#g_target_hidemaruhandle=dllfuncw(#g_dll_ohtorii_tools,"StaticStatusGetTargetHidemaruHandle");
$g_root_macro_directory =dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetRootMacroDirectory");


//==========================================================================
//メイン処理
//==========================================================================
if($g_label_name==""){
	call main;
	endmacro $$return;
}else{
	call $g_label_name, getarg(21),getarg(22),getarg(23),getarg(24),getarg(25);
	endmacro $$return;
}



main:
	debuginfo "internal/action.mac";
	##candidate_index=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchGetFirstSelectionCandidateIndex");
	if(##candidate_index==-1){
		debuginfo "  [Failed]internal/action.mac return false.";
		return "0";
	}
	$$source_name	=dllfuncstrw(#g_dll_ohtorii_tools,"CandidatesGetSourceName",##candidate_index);
	##ret=dllfuncw(#g_dll_ohtorii_tools,"InheriatnceGenerateDefaultAction",$$source_name);
	if(! ##ret){
		debuginfo "  [Failed]internal/action.mac return 0. $$source_name="+$$source_name;
		return "0";
	}
	if($g_do_action_name==""){
		//ディフォルトアクションを取得する
		$$kind	=dllfuncstrw(#g_dll_ohtorii_tools,"InheriatnceGetDefaultActionKind");
		$$action=dllfuncstrw(#g_dll_ohtorii_tools,"InheriatnceGetDefaultActionLabel");
	}else{
		//指定されたアクションを取得する
		$$kind	=dllfuncstrw(#g_dll_ohtorii_tools,"InheritanceFindActionKind",$g_do_action_name);
		if($$kind==""){
			debuginfo "  [Failed]internal/action.mac return 0. $$kind==\"\"";

			/*
			このブロックに入る条件、
			(1)default_action指定を間違えた
			(2)auto_preview=onの時にアクション一覧でpreviewが見つからない


			(1)の時は、エラーメッセージを表示した方が良い。
			(2)の時は、何もしない方が良い。

			(2)を優先してコメントアウトした。

			message sprintf(@"[Error] アクションが見つかりません。
アクション名=%s
ソース名    =%s"
, $g_do_action_name
, $$source_name
);*/

			return "0";
		}
		$$action=$g_do_action_name;
	}
    $$kind_filename =$g_root_macro_directory+"\\kinds\\"+$$kind+".mac";

	call pre_action,$$kind, $$action;
	call exec_action, $$kind_filename, $$kind, $$action;

	/*memo
	is_quitはexecmacro呼び出しで上書きされるためこれ以上何もしない。
	*/

	$$ret=$$return;
	debuginfo "  [Success]internal/action.mac $$ret=" + $$ret;
	return $$ret;


pre_action:
	/*アクションを呼び出す前の処理。
	内部状態(Status)を初期値に戻します。
	*/
	$$default_kind	=$$1;
	$$default_action=$$2;
	##previous_context=dllfuncw(#g_dll_ohtorii_tools,"GetCurrentContext") - 1;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"StatusUpdate",$$default_kind, $$default_action,##previous_context);
	return ##ret;


exec_action:
	debuginfo "internal/action.mac exec_action";

	$$kind_filename	=$$1;
	$$kind			=$$2;
	$$default_action=$$3;

	execmacro currentmacrodirectory+"\\is_edit.mac", str(#g_dll_ohtorii_tools), $$kind, $$default_action;
	##is_edit = val(getresultex(-1));
	##ohtorii_dll_handle=0;

	debuginfo "  -> ##is_edit="+str(##is_edit);

	if(##is_edit){
		call SerializeCurrentContext;
		$$current_contex_filename=$$return;
		if($$current_contex_filename==""){
			return "0";
		}

		//
		//操作対象となる秀丸エディタへ切り替える
		//
		##current_hidemaruhandle=hidemaruhandle(0);
		setactivehidemaru(#g_target_hidemaruhandle);

		//切り替えた秀丸エディタへohtorii_toolsを読み込む
		execmacro currentmacrodirectory+"\\load_ohtorii_tools_dll.mac";
		##ohtorii_dll_handle=val(getresultex(-1));
		if(##ohtorii_dll_handle==0){
			//元の秀丸エディタへ切り替える
			setactivehidemaru(##current_hidemaruhandle);
			debuginfo " internal/action.mac exec_action -> false";
			return "0";
		}
		debuginfo "  DeSerializeToCurrentContext";
		//deserialize
		##ret=dllfuncw(##ohtorii_dll_handle,"DeSerializeToCurrentContext", $$current_contex_filename);
		if(! ##ret){
			call FreeDll;
			//元の秀丸エディタへ切り替える
			setactivehidemaru(##current_hidemaruhandle);
			debuginfo " internal/action.mac exec_action -> false";
			return "0";
		}
	}else{
		##ohtorii_dll_handle=#g_dll_ohtorii_tools;
	}

	debuginfo "  $$kind_filename="+$$kind_filename;
	debuginfo "  $$default_action="+ $$default_action;
	$$args[0]="do_action";
	$$args[1]=$$default_action;
	$$args[29]=str(#g_dll_hm_process);
	$$args[30]=str(##ohtorii_dll_handle);
	execmacro $$kind_filename, $$args, 31;
	$$action_result = getresultex(-1);

	if(##is_edit){
		call SerializeStaticStatusContext;
		$$status_contex_filename=$$return;

		call FreeDll;

		if($$status_contex_filename==""){
			debuginfo " internal/action.mac SerializeStaticStatusContext -> false";
			return "0";
		}

		//
		//元の秀丸エディタへ切り替えアクションで更新されたステータスを反映する。
		//
		setactivehidemaru(##current_hidemaruhandle);
		##ret=dllfuncw(##ohtorii_dll_handle,"DeSerializeToStaticStatusContext", $$status_contex_filename);
		if(! ##ret){
			debuginfo " internal/action.mac DeSerializeToStaticStatusContext -> false";
			return "0";
		}
	}
	debuginfo " internal/action.mac exec_action -> true";
	return $$action_result;


SerializeMain:
	$$FunctionName=$$1;

	execmacro $g_root_macro_directory+"\\internal\\create_temp_file.mac","serialize",".bin";
	$$serialize_filename=getresultex(-1);
	if($$serialize_filename==""){
		debuginfo " internal/action.mac exec_action -> false";
		return "";
	}
	##ret=dllfuncw(#g_dll_ohtorii_tools,"FileRegistAfterDeleteFile",$$serialize_filename);
	if(! ##ret){
		debuginfo " internal/action.mac exec_action -> false";
		return "";
	}

	debuginfo "  SerializeToCurrentContext";
	//現在のコンテキストをserializeする
	##ret=dllfuncw(#g_dll_ohtorii_tools, $$FunctionName, $$serialize_filename);
	if(! ##ret){
		debuginfo " internal/action.mac exec_action -> false";
		return "";
	}
	return $$serialize_filename;


SerializeCurrentContext:
	call SerializeMain, "SerializeCurrentContext";
	return $$return;


SerializeStaticStatusContext:
	call SerializeMain, "SerializeStaticStatusContext";
	return $$return;


FreeDll:
	if(##dll_ohtorii_tools != 0){
		freedll ##dll_ohtorii_tools;
		##dll_ohtorii_tools=0;
	}
	return;
