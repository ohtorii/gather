/* アクションから候補を取得する

引数	ohtorii_tools_dll_handle, root_macro_directory
返値	成功	"1"
		失敗	"0"
*/


//==========================================================================
//グローバル変数
//==========================================================================
#g_target_hidemaruhandle=val(getstaticvariable("$unity.target_hidemaruhandle",1));
$g_root_macro_directory =getstaticvariable("$unity.root_macro_directory", 1);

#g_dll_ohtorii_tools	=val(getarg(0));


//==========================================================================
//メイン処理
//==========================================================================
call main;
endmacro $$return;


main:
	debuginfo 1;
	debuginfo "internal/action.mac";
	##candidate_index=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchGetFirstSelectionCandidateIndex");
	if(##candidate_index==-1){
		debuginfo "  [Failed]internal/action.mac return false.";
		return "0";
	}
	$$source_name	=dllfuncstrw(#g_dll_ohtorii_tools,"CandidatesGetSourceName",##candidate_index);
	##ret=dllfuncw(#g_dll_ohtorii_tools,"InheriatnceGenerateDefaultAction",$$source_name);
	if(! ##ret){
		debuginfo "  [Failed]internal/action.mac return 0";
		return "0";
	}
	$$default_kind	=dllfuncstrw(#g_dll_ohtorii_tools,"InheriatnceGetDefaultActionKind");
	$$default_action=dllfuncstrw(#g_dll_ohtorii_tools,"InheriatnceGetDefaultActionLabel");
	$$kind_filename =$g_root_macro_directory+"\\kinds\\"+$$default_kind+".mac";

	call pre_action,$$default_kind, $$default_action;
	call exec_action, $$kind_filename, $$default_action;

	/*memo
	is_quitはexecmacro呼び出しで上書きされるためこれ以上何もしない。
	*/

	$$ret=$$return;
	debuginfo "  [Success]internal/action.mac $$ret=" + $$ret;
	return $$ret;


pre_action:
	/*アクションを呼び出す前の処理

	主な処理内容：	内部状態を初期値に戻す。
	*/
	$$default_kind	=$$1;
	$$default_action=$$2;

	//is_quit
	execmacro currentmacrodirectory+"\\is_quit.mac", str(#g_dll_ohtorii_tools), $$default_kind, $$default_action;
	$$is_quit = getresultex(-1);
	setstaticvariable "$unity.is_quit", $$is_quit,1;

	//is_start
	##ret=dllfuncw(#g_dll_ohtorii_tools,"StatusClearIsStart");
	if(!##ret){
		return false;
	}
	execmacro currentmacrodirectory+"\\is_start.mac", str(#g_dll_ohtorii_tools), $$default_kind, $$default_action;
	if(getresultex(-1)=="0"){
		##is_start=false;
	}else{
		##is_start=true;
	}
	debuginfo "StatusSetIsStart.##is_start="+str(##is_start);
	##ret=dllfuncw(#g_dll_ohtorii_tools,"StatusSetIsStart",##is_start);
	return ##ret;



exec_action:
	debuginfo "internal/action.mac exec_action";
	$$kind_filename	=$$1;
	$$action_name	=$$2;

	call SerializeCurrentContext;
	$$current_contex_filename=$$return;
	if($$current_contex_filename==""){
		return "0";
	}

	//
	//操作対象となる秀丸エディタへ切り替える
	//
	##current_hidemaruhandle=hidemaruhandle(0);
	setactivehidemaru(#g_target_hidemaruhandle);

	//切り替えた秀丸エディタへohtorii_toolsを読み込む
	execmacro currentmacrodirectory+"\\load_ohtorii_tools_dll.mac";
	##dll_ohtorii_tools=val(getresultex(-1));
	if(##dll_ohtorii_tools==0){
		//元の秀丸エディタへ切り替える
		setactivehidemaru(##current_hidemaruhandle);
		debuginfo " internal/action.mac exec_action -> false";
		return "0";
	}
	debuginfo "  DeSerializeToCurrentContext";
	//deserialize
	##ret=dllfuncw(##dll_ohtorii_tools,"DeSerializeToCurrentContext", $$current_contex_filename);
	if(! ##ret){
		call FreeDll;
		//元の秀丸エディタへ切り替える
		setactivehidemaru(##current_hidemaruhandle);
		debuginfo " internal/action.mac exec_action -> false";
		return "0";
	}

	debuginfo "  $$kind_filename="+$$kind_filename;
	debuginfo "  $$action_name="+ $$action_name;
	execmacro $$kind_filename, str(##dll_ohtorii_tools), "do_action", $$action_name;
	$$action_result = getresultex(-1);

	call SerializeStatusContext;
	$$status_contex_filename=$$return;

	call FreeDll;

	if($$status_contex_filename==""){
		debuginfo " internal/action.mac SerializeStatusContext -> false";
		return "0";
	}

	//
	//元の秀丸エディタへ切り替えアクションで更新されたステータスを反映する。
	//
	setactivehidemaru(##current_hidemaruhandle);
	##ret=dllfuncw(##dll_ohtorii_tools,"DeSerializeToStatusContext", $$status_contex_filename);
	if(! ##ret){
		debuginfo " internal/action.mac DeSerializeToStatusContext -> false";
		return "0";
	}
	debuginfo " internal/action.mac exec_action -> true";
	return $$action_result;


SerializeMain:
	$$FunctionName=$$1;

	execmacro $g_root_macro_directory+"\\internal\\create_temp_file.mac";
	$$serialize_filename=getresultex(-1);
	if($$serialize_filename==""){
		debuginfo " internal/action.mac exec_action -> false";
		return "";
	}
	##ret=dllfuncw(#g_dll_ohtorii_tools,"FileRegistAfterDeleteFile",$$serialize_filename);
	if(! ##ret){
		debuginfo " internal/action.mac exec_action -> false";
		return "";
	}

	debuginfo "  SerializeToCurrentContext";
	//現在のコンテキストをserializeする
	##ret=dllfuncw(#g_dll_ohtorii_tools, $$FunctionName, $$serialize_filename);
	if(! ##ret){
		debuginfo " internal/action.mac exec_action -> false";
		return "";
	}
	return $$serialize_filename;


SerializeCurrentContext:
	call SerializeMain, "SerializeCurrentContext";
	return $$return;


SerializeStatusContext:
	call SerializeMain, "SerializeStatusContext";
	return $$return;


FreeDll:
	if(##dll_ohtorii_tools != 0){
		freedll ##dll_ohtorii_tools;
		##dll_ohtorii_tools=0;
	}
	return;
