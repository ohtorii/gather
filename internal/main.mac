/* Unite-Vimを秀丸エディタへ移植中（まだ動かない）

usage:
	unity.mac root_dir sources

引数
	root_dir	unityマクロのルートディレクトリ
	sources 	タブ区切りのソース名
				(例)"file_mru\tprocess"

===============================================================================
Unite-vimの説明。
https://www.youtube.com/watch?v=Co4Np4SXOOc
*/


/*****************************************************************************
	グローバル変数
*****************************************************************************/
#g_open_newfile = false;
#g_new_hidemaru = 0;
#g_target_hidemaru = hidemaruhandle(0);

//DLL
#g_hmjre_dll 	= 0;
#g_dengaku_dll 	= 0;
#g_dll_ohtorii_tools=0;
#g_dll_hm_process=0;
#g_dll_output_panel=0;


/*****************************************************************************
	その他グローバル変数
*****************************************************************************/
//マクロのルートディレクトリ
$g_root_macro_directory=getarg(0);


/*****************************************************************************
	グローバル変数(const)
*****************************************************************************/
//command-lineへのパス（暫定）
$g_command_line_path=$g_root_macro_directory+"\\..\\command-line\\command-line-internal";
//空白文字の定義
$g_space = "\r\n\t 　";

//返値
#g_result_cancel		=0;
#g_result_success		=1;
#g_result_continue		=2;
#g_result_quit			=3;
#g_result_faile 		=-1;

/*****************************************************************************
	メイン処理
*****************************************************************************/

$g_old_searchbuffer = searchbuffer;
#g_old_searchoption = searchoption;
#g_target_hidemaru  = hidemaruhandle(0);

debuginfo 1;
disablebreak;
disablehistory 0xff;
//disableinvert;カーソルキーが表示されなくなるためコメントアウトした。
call main getarg(1);
setsearch $g_old_searchbuffer, #g_old_searchoption;
endmacro;

main:
	##old_column=column;
	##old_lineno=lineno;

	call Start $$1;
	##ret = ##return;

	//カーソル位置を元に戻す
	moveto2 ##old_column,##old_lineno;

	//
	//後処理
	//
	call FreeDll;
	call CloseFileIfOpen;
	$$forcus_hidemaru_handle=getstaticvariable("$unity.hidemaruhandle_to_focus_at_end_of_process",1);
	##forcus_hidemaru_handle=val($$forcus_hidemaru_handle);
	if(##forcus_hidemaru_handle!=0){
		setactivehidemaru ##forcus_hidemaru_handle;
	}

	return ##ret;

/*
return	アクションが最後まで実行されたかどうか(bool)
		false	実行された
		true	実行されていない
*/
Start:
	$$source_list	=$$1;
	if($$source_list==""){
		return false;
	}

	setstaticvariable "$unity.hidemaruhandle_to_focus_at_end_of_process",str(0), 1;
	setstaticvariable "$unity.target_hidemaruhandle", str(#g_target_hidemaru), 1;
	setstaticvariable "$unity.current_working_directory", directory2, 1;
	debuginfo "directory2="+directory2;
	call NewFile;
	if(! ##return){
		return false;
	}

	setstaticvariable "$unity.root_macro_directory", $g_root_macro_directory,1;
	setstaticvariable "$unity.is_quit", "1",1;

	call LoadDll;
	if(! ##return){
		return false;
	}
	//##n=dllfuncw(#g_dll_ohtorii_tools,"Initialize");
	call LoadKindAll;
	if(! ##return){
		return false;
	}
	call LoadSourceAll;
	if(! ##return){
		return false;
	}

	{//ソースを読み込む
		##num_source= split($$sources,$$source_list, "\t");
		##i			= 0;
		debuginfo "##num_source="+str(##num_source);
		while(##i<##num_source){
			$$source_filename=$g_root_macro_directory+"\\sources\\"+$$sources[##i]+".mac";
			debuginfo"$$sources[##i]="+$$sources[##i];
			execmacro currentmacrodirectory+"\\source.mac", str(#g_dll_ohtorii_tools), str(#g_dll_hm_process), $$source_filename, "";
			if(getresultex(-1)=="0"){
				return 0;
			}
			##i = ##i + 1;
		}
	}
	call RefineSearch "", "";
	call FreeDll;
	call CloseFileIfOpen;
	if(! ##return){
		return false;
	}

	return true;


//#region 絞り込み検索
RefineSearch:
	/*
	引数	$$1		ソースのファイル名
		$$2		引数

	return	0 	キャンセル
			1 	確定
			-1	エラー
	*/
	$$source_filename	= $$1;
	$$args				= $$2;

	debuginfo 1;

	//
	//ソースから候補を生成する
	//
	if($$source_filename!=""){
		execmacro currentmacrodirectory+"\\source.mac", str(#g_dll_ohtorii_tools), str(#g_dll_hm_process), $$source_filename, $$args;
	}

	//絞り込み検索を行う
	call RefineSearchMain;
	##ret=##return;
	return ##ret;


PushRefineSearch:
	##exist_context_then_delete=true;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"PushContext", ##exist_context_then_delete);
	return ##ret;


PopRefineSearch:
	##exist_context_then_delete=true;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"PopContext", ##exist_context_then_delete);
	return ##ret;


RefineSearchMain:
	/*
	return	0 	キャンセル
			1 	確定
			-1	エラー
	*/
	$$keybord_buffer="";

	execmacro $g_root_macro_directory+"\\..\\command-line\\command-line-internal\\parse_result.mac" , "cursor"		, $$keybord_buffer;
	$$cursor_pos=getresultex(-1);
	execmacro $g_root_macro_directory+"\\..\\command-line\\command-line-internal\\parse_result.mac" , "keybuffer"	, $$keybord_buffer;
	$$key_buffer=getresultex(-1);

	deletecolormarkerall "gather";

	//事前に実行してDLL側のデータを作る。
	call Filter $$key_buffer;

	$$prev_pattern="999";
	##candidates_update_interval=20;
	##candidates_update_prev_tickcount=0;

	##hm_process_update_interval=100;
	##hm_process_update_prev_tickcount=0;

	while(true){
		execmacro $g_command_line_path+"\\input-keys.mac", $$key_buffer, $$cursor_pos;
		$$keybord_buffer=getresultex(-1);
		execmacro $g_command_line_path+"\\parse_result.mac" , "keycode"		, $$keybord_buffer;
		$$keycode=getresultex(-1);
		execmacro $g_command_line_path+"\\parse_result.mac" , "cursor"		, $$keybord_buffer;
		$$cursor_pos=getresultex(-1);
		execmacro $g_command_line_path+"\\parse_result.mac" , "keybuffer"	, $$keybord_buffer;
		$$key_buffer=getresultex(-1);

		##ctrl =iskeydown(0x11);
		if($$keycode=="13"){		/*Enter / ctrl-m*/
			call Enter;
			if(##return==#g_result_continue){continue;}
			if(##return==#g_result_quit)	{return #g_result_success;}
			return ##return;
		}else if($$keycode=="27"){				return #g_result_cancel;}			//Escapeが押された
		else if($$keycode=="16"){				call CursorUp;} 	//ctrl-p
		else if($$keycode=="14"){				call CursorDown;}	//ctrl-n
		else if($$keycode=="18"){				call Mark;call CursorDown;} 		//ctrl-space
		else if(##ctrl&&($$keycode=="32")){ 	call Mark;call CursorDown;} 		//ctrl-space
		else if($$keycode == "29"){ 			call CursorUp;} 	//[↑]
		else if($$keycode == "31"){ 			call CursorDown;}	//[↓]
		else if($$keycode=="9"){									//tab
			/*	アクションを選択する */
			##current_context=dllfuncw(#g_dll_ohtorii_tools,"GetCurrentContext");
			call NewCandidate currentmacrodirectory+"\\generate_action_candidates.mac",str(##current_context);
			if(##return==#g_result_continue){continue;}
			if(##return==#g_result_quit)	{return #g_result_success;}
			return ##return;
		}else{
			if(($$prev_pattern != $$key_buffer) && (##candidates_update_interval<(tickcount-##candidates_update_prev_tickcount))){
				##candidates_update_prev_tickcount=tickcount;
				call Filter $$key_buffer;
				$$prev_pattern=$$key_buffer;
			}
			if(##hm_process_update_interval < (tickcount-##hm_process_update_prev_tickcount)){
				##hm_process_update_prev_tickcount=tickcount;
				call UpdateHmPocess;
			}
		}
	}
	return #g_result_faile;


Enter:
	/*Enterキーの処理
	return	#g_result_quit
			#g_result_faile
			#g_result_continue
	*/
	execmacro currentmacrodirectory+"\\action.mac", str(#g_dll_ohtorii_tools), str(#g_dll_hm_process);
	if(getresultex(-1) != "1"){
		return #g_result_faile;		//失敗
	}

	//
	//成功
	//

	##is_quit=val(getstaticvariable("$unity.is_quit",1));
	if(##is_quit){
		return #g_result_quit;
	}

	##is_start=dllfuncw(#g_dll_ohtorii_tools,"StatusEnableIsStart");
	debuginfo 1;
	debuginfo "##is_start="+str(##is_start);
	if(##is_start){
		$$source_name=dllfuncstrw(#g_dll_ohtorii_tools,"StatusGetIsStartSourceName");
		$$arg=dllfuncstrw(#g_dll_ohtorii_tools,"StatusGetIsStartArg");
		$$source_filename=dllfuncstrw(#g_dll_ohtorii_tools,"SourcesSourceNameToFileName",$$source_name);
		call NewCandidate, $$source_filename, $$arg;
		return ##return;
	}
	//画面を更新して再度絞り込み検索を行う。
	call Filter $$key_buffer;
	return #g_result_continue;


NewCandidate:
	/*新規の候補選択
	return	#g_result_quit
			#g_result_faile
			#g_result_continue
	*/
	debuginfo "Enter NewCandidate";
	$$source_filename	=$$1;
	$$arg				=$$2;

	debuginfo "  $$source_filename="+$$source_filename;
	debuginfo "  $$arg="+$$arg;

	call PushRefineSearch;
	if(##return==false){
		//(Memo)TABを連何度も押すとこの処理に入る。とりあえず無視する。
		debuginfo "  [Failed]Push";
		return #g_result_continue;
	}

	call RefineSearch $$source_filename	,$$arg;
	##search_result	=##return;
	##is_quit		=val(getstaticvariable("$unity.is_quit",1));

	call PopRefineSearch;
	if(##return==false){
		return #g_result_faile;
	}

	if(##search_result==#g_result_cancel){
		//キャンセル
		//画面を更新して再度絞り込み検索を行う。
		call Filter $$key_buffer;
		return #g_result_continue;
	}
	if(##search_result==#g_result_success){
		//成功
		if(##is_quit){
			return #g_result_quit;
		}
		//画面を更新して再度絞り込み検索を行う。
		call Filter $$key_buffer;
		return #g_result_continue;
	}
	return ##search_result;


CursorMoveCommon:
	##delta = ##1;
	##next_line_no=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchMoveHidemaruCursorLineNo",lineno,##delta);
	if(##next_line_no == -1){
		return false;
	}
	moveto2 column,##next_line_no;
	##n=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchSetHidemaruLineno",lineno);
	return result;


CursorUp:
	call CursorMoveCommon -1;
	return ##return;


CursorDown:
	call CursorMoveCommon 1;
	return ##return;


Mark:
	//カーソル行に色を塗る
	disabledraw;
	$$marker=getcolormarker(0x0001,"gather");
	if($$marker=="000000FF"){
		//マーク削除
		##ret=dllfunc(#g_dll_ohtorii_tools,"RefineSearchChangeMarked",lineno,false);
		selectline 0;
		deletecolormarker "gather";
		escape;
	}else{
		//マークする
		##ret=dllfunc(#g_dll_ohtorii_tools,"RefineSearchChangeMarked",lineno,true);
		selectline 0;
		colormarker 0x000000ff,-1,-1,0,0x00,"gather";
		escape;
	}

	enabledraw;
	return;


Filter:
	/*絞り込み検索を行う
	*/
	call TrimString $$1;
	$$pattern=$$return;

	##old_lineno=lineno;

	disabledraw;
	selectall;
	//backspace;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchDo",$$pattern);
	insert(dllfuncstrw(#g_dll_ohtorii_tools,"RefineSearchGetResult"));
	call HilightWorld $$pattern;

	//
	//選択行をマークする
	//
	##i = 0;
	##count = dllfuncw(#g_dll_ohtorii_tools,"RefineSearchGetMarkedCount");
	while(##i<##count){
		##selected_lineno = dllfuncw(#g_dll_ohtorii_tools,"RefineSearchConvertSelectedIndexToHidemaruLineno",##i);
		if(0 < ##selected_lineno){
			movetolineno 1, ##selected_lineno;
			selectline 0;
			colormarker 0x000000ff,-1,-1,0,0x00,"gather";
			escape;
		}
		##i = ##i + 1;
	}

	//
	//行位置を維持する対策。
	//
	//まずは、行数が増減するためカーソル位置を前候補の位置に移動する
	moveto2 0,##old_lineno;
	//次に正しい行番号へ移動する。(そのためにdelt=0としている)
	call CursorMoveCommon 0;
	refreshtabstop;
	enabledraw;
	return result;


HilightWorld:
	/*
	検索文字列をハイライト表示する
	*/

	$$search_words=$$1;
	call SearchWordsToHidemaruRegex $$search_words;
	$$regex=$$return;
	setsearch $$regex,0x00000800|0x00000010;
	hilightfound 1;
	return;

SearchWordsToHidemaruRegex:
	/*空白区切りの文字列を秀丸エディタの正規表現に変換する。
	[in]	"hoge 123 .txt"
	[out]	"hoge|123|\.txt"
	*/
	$$word_list=$$1;
	$$escaped=quote($$word_list);
	$$regex = dllfuncstr(#g_hmjre_dll,"ReplaceRegular", "[" + $g_space + "]+", $$escaped, 0, "|", 2);
	return $$regex;

UpdateHmPocess:
	$$text=dllfuncstrw(#g_dll_hm_process,"ReadStandardOutputAll");
	if($$text!=""){
		call AppendTextToOutputPanel $$text;
	}
	$$text=dllfuncstrw(#g_dll_hm_process,"ReadStandardErrorAll");
	if($$text!=""){
		call AppendTextToOutputPanel $$text;
	}
	return ;


AppendTextToOutputPanel:
	if(#g_dll_output_panel==0){
		#g_dll_output_panel=loaddll("HmOutputPane.dll");
		if(#g_dll_output_panel==0){
			return false;
		}
	}
	##ret=dllfunc(#g_dll_output_panel,"Output",hidemaruhandle(0),$$1);
	return ##ret;


TrimString:
	if($$2==""){
		$$space=$g_space;
	}else{
		$$space=$$2;
	}
	while(1){
	  ##word=strlen($$1);
	  //文字列の先頭に空白文字がある場合、空白文字を削除
	  if(strstr($$space,leftstr($$1,2))!=-1)$$1=rightstr($$1,##word-2);
	  else if(strstr($$space,rightstr($$1,2))!=-1)$$1=leftstr($$1,##word-2);
	  //ここまで全角文字の対処
	  else if(strstr($$space,leftstr($$1,1))!=-1)$$1=rightstr($$1,##word-1);
	  else if(strstr($$space,rightstr($$1,1))!=-1)$$1=leftstr($$1,##word-1);
	  else break;
	}
	return $$1;


//#region 秀丸の編集画面
NewFile:
	newfile;
	if(result==0){
		#g_open_newfile=false;
		return false;
	}
	#g_open_newfile=true;
	#g_new_hidemaru=hidemaruhandle(0);

	/* 折りたたみを表示しない*/
	config "xFoldingTwigBar:0";
	/*見出しバー表示*/
	config "xOutlineBar:1";
	/*行番号表示*/
	config "xShowLineNo:0";
	/*TSVモード*/
	config "xTabMode:0x0001";
	config "xGuideLine:0x00";
	config "xOrikaeshiLine:0";

	return true;

CloseFileIfOpen:
	if(#g_open_newfile){
		setactivehidemaru	#g_target_hidemaru;
		closehidemaruforced #g_new_hidemaru;

		#g_target_hidemaru=0;
		#g_new_hidemaru=0;

		#g_open_newfile=false;
	}
	return true;


//#region Kind
LoadKindAll:
	/*全カインドをDLLへ読み込む*/
	$$kinds[0]="";
	##kinds_num=0;

	$$root = $g_root_macro_directory+"\\kinds\\";
	##n = dllfunc(#g_dengaku_dll,"ENUMFILE",$$root+"*.mac");
	while (1) {
		$$file = dllfuncstr(#g_dengaku_dll,"FINDNEXT");
		if ($$file == "") {
			break;
		}
		$$kinds[##kinds_num]=$$root+$$file;
		##kinds_num = ##kinds_num + 1;
	}

	##n=dllfuncw(#g_dll_ohtorii_tools,"KindsClear");

	##i=0;
	while(##i<##kinds_num){
		$$args[0]="get_property";
		$$args[30]=str(#g_dll_ohtorii_tools);
		execmacro $$kinds[##i],$$args,31;

		$$kind_name=dllfuncstrw(#g_dll_ohtorii_tools,"KindsCreate",getresultex(-1));
		if($$kind_name==""){
			return false;
		}
		##i = ##i + 1;
	}
	return true;

//#region Source
LoadSourceAll:
	/*全ソースをDLLへ読み込む*/
	$$sources[0]="";
	##sources_num=0;

	$$root = $g_root_macro_directory+"\\sources\\";
	##n = dllfunc(#g_dengaku_dll,"ENUMFILE",$$root+"*.mac");
	while (1) {
		$$file = dllfuncstr(#g_dengaku_dll,"FINDNEXT");
		if ($$file == "") {
			break;
		}
		$$sources[##sources_num]=$$root+$$file;
		##sources_num = ##sources_num + 1;
	}

	##i=0;
	while(##i<##sources_num){
		/*ソースのプロパティを取得する
		*/
		$$source_filename=$$sources[##i];
		$$args[0]="get_property";
		$$args[30]=str(#g_dll_ohtorii_tools);
		execmacro $$source_filename, $$args,31;
		$$source_name=dllfuncstrw(#g_dll_ohtorii_tools,"SourcesCreate",getresultex(-1));
		if($$source_name==""){
			return false;
		}
		##ret=dllfuncw(#g_dll_ohtorii_tools,"SourcesAppendFileNameAndSourceName",$$source_filename,$$source_name);
		if(!##ret){
			return false;
		}
		##i = ##i + 1;
	}
	return true;


//#region DLL
LoadDll:
	execmacro currentmacrodirectory+"\\load_ohtorii_tools_dll.mac";
	#g_dll_ohtorii_tools=val(getresultex(-1));
	if (#g_dll_ohtorii_tools==0) {
		return false;
	}

	execmacro currentmacrodirectory+"\\load_hm_process_dll.mac";
	#g_dll_hm_process=val(getresultex(-1));
	if (#g_dll_hm_process==0) {
		return false;
	}

	execmacro currentmacrodirectory+"\\load_dll.mac", "HmJre.dll";
	#g_hmjre_dll=val(getresultex(-1));
	if(#g_hmjre_dll==0){
		return false;
	}
	execmacro currentmacrodirectory+"\\load_dll.mac", "DengakuDLL.dll";
	#g_dengaku_dll=val(getresultex(-1));
	if(#g_dengaku_dll==0){
		return false;
	}
	return true;


FreeDll:
	if(#g_dll_ohtorii_tools!=0){
		freedll #g_dll_ohtorii_tools;
		#g_dll_ohtorii_tools=0;
	}
	if(#g_dll_hm_process!=0){
		##ret = dllfuncw(#g_dll_hm_process,"Finish");
		freedll #g_dll_hm_process;
		#g_dll_hm_process=0;
	}

	if(#g_hmjre_dll!=0){
		freedll #g_hmjre_dll;
		#g_hmjre_dll=0;
	}

	if(#g_dengaku_dll!=0){
		freedll #g_dengaku_dll;
		#g_dengaku_dll=0;
	}
	if(#g_dll_output_panel!=0){
		freedll #g_dll_output_panel;
		#g_dll_output_panel=0;
	}
	return true;


//#region そのた
/*ファイルの新規作成*/
file_new:

	return ;


/*フォルダヒストリ
*/
directory_mru:
	##i=0;
	while(##i<100){
		$$path=getpathhist(##i);
		if($$path==""){
			break;
		}
		insert($$path+"\n");
		##i = ##i + 1;
	}
	return true;

/*タブ一覧
*/
tab:
	/*
	ウインドウモードの時
	未実装

	# タブモードの時
	1: タブグループ
		1.1: foo.txt
		1.2: bar.txt
	2: タブグループ
		2.1: readme.md
		2.2: (無題) *
	*/
	if($$1=="get_candidate_mode"){
		//この関数は文字列を返す
		return "string";
	}else if($$1=="generate_candidate"){
		if(! tabmode){
			return "";
		}
		$$candidate_list="";
		##i 			= 0;
		while( ##i < tabgrouptotal ) {
			##grouptop 		= gettabhandle( true, ##i, 0 );
			$$candidate_list=$$candidate_list+str(##i+1)+": タブグループ\n";
			##j 			= 0;
			while( ##j < tabtotal[##grouptop] ) {
				##handle = gettabhandle( true, ##i, ##j );
				$$candidate_list=$$candidate_list+"\t"+ str(##i+1)+"."+str(##j+1) + ": "+filename2[##handle]+"\n";
				##j = ##j + 1;
			}
			##i = ##i + 1;
		}
		return $$candidate_list;
	}
	return "";

window:
	/*
	ウインドウモード時
	未実装

	タブモード時
	1: foo.txt
	2: bar.txt

	*/
	if($$1=="get_candidate_mode"){
		//この関数は文字列を返す
		return "string";
	}else if($$1=="generate_candidate"){
		if(! tabmode){
			return "";
		}
		$$candidate_list	="";
		##i 				=0;
		##group				=tabgroup[hidemaruhandle(0)];
		while( ##i < tabtotal[##group] ) {
			##tab_handle 	=gettabhandle( false, ##group, ##i );
			$$candidate_list=$$candidate_list+str(##i+1)+": " + filename2[##tab_handle] + "\n";
			##i 			=##i + 1;
		}
		return $$candidate_list;
	}
	return "";
