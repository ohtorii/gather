/* Unite-Vimを秀丸エディタへ移植中（まだ動かない）

usage:
	unity.mac root_dir sources

引数
	root_dir	unityマクロのルートディレクトリ
	sources 	タブ区切りのソース名
				(例)"file_mru\tprocess"

==============================================================================
Action
==============================================================================
# common
実装済	機能			説明				補足
○		nop			なにもしない
×		append						insertのみ実装することにした
		delete
○		echo				ファイル（またはディレクトリ）の情報を色々出力
×		ex					ファイル（またはディレクトリ）のフルパスをコマンドラインに挿入
○		insert				ファイル（またはディレクトリ）の名前を挿入
○		insert_directory	ファイル（またはディレクトリ）のフルパスを挿入
○		preview				ファイル（またはディレクトリ）を開く
○		yank				ファイル（またはディレクトリ）のフルパスをyankにコピー
		yank_escape			ファイル（またはディレクトリ）のフルパスをyankにコピー(エスケープする)


# openable
実装済	機能			説明				補足
		tabopen			Open the file in a new tab.
		choose			Open the file in a selected window.
		split			Open the file, splitting horizontally.
		vsplit			Open the file, splitting vertically.
		left			Open the file in the left, splitting vertically.
		right			Open the file in the right, splitting vertically.
		above			Open the file in the top, splitting horizontally.
		below			Open the file in the bottom, splitting horizontally.
		persist_open	Open the file in alternate window.  unite window isn't closed.
		tabsplit		Open the files and vsplit in a new tab.
		switch			Open the file in current window or jump to existing window/tabpage.
		tabswitch		Open the file in new tab or jump to existing window/tabpage.
		splitswitch		Open the file in split window or jump to existing window/tabpage.
		vsplitswitch	Open the file in vertical split window or jump to existing window/tabpage.


# tab
実装済	機能			説明				補足
		delete      delete tabs
		edit        rename tabs
		open        open this tab
		preview     preview tab
		rename      rename tabs


# cdable
実装済	機能			説明				補足
		cd			カレントディレクトリ移動
		lcd			現在のウィンドウのカレントディレクトリ移動
		tabnew_cd	カレントディレクトリを移動し、新しいタブを開く
		vimshell	対象をカレントディレクトリとしてvimshellを起動する
		vimfiler	対象をカレントディレクトリとしてvimfilerを起動する

# opanable
実装済	機能			説明				補足
		tabopen		新しいタブで対象を開く
		chose		選択したウィンドウでファイルを開く
		split		垂直方向にウィンドウを分割して開く
		vsplit		水平方向にウィンドウを分割して開く
		left, right, above, bellow	それぞれの方向にウィンドウを分割して開く

# file
実装済	機能			説明				補足
		open		ファイルを開く
		preview		プレビューウィンドウでファイルを開く
		bookmark	ファイルをブックマークに追加する
		mkdir		ディレクトリ作成(directory_newと同じ感じ？)
		diff		対象ファイルと、もうひとつのdiffを表示
		grep, grep_directory	ファイル、もしくはディレクトリに対してgrep検索


# command
実装済	機能			説明				補足
		edit        edit command
		execute     execute command
		grep        grep this command


===============================================================================
Unite-vimの説明。
https://www.youtube.com/watch?v=Co4Np4SXOOc
*/

//空白文字の定義
$g_space="\r\n\t 　";


#g_open_newfile = false;
#g_new_hidemaru = 0;
#g_target_hidemaru = hidemaruhandle(0);

//DLL
#g_hmjre_dll 	= 0;
#g_dengaku_dll 	= 0;
#g_dll_ohtorii_tools=0;



/*****************************************************************************
	その他グローバル変数
*****************************************************************************/
//マクロのルートディレクトリ
$g_root_macro_directory=getarg(0);

/*アクションへ渡すことが出来る最大ファイル数
(memo)
execmacro へ渡せる引数の上限は31個
ファイル名は引数の [11] 以降。
*/
//#g_max_file_num=30-11;


/*****************************************************************************
	メイン処理
*****************************************************************************/

$g_old_searchbuffer = searchbuffer;
#g_old_searchoption = searchoption;
#g_target_hidemaru  = hidemaruhandle(0);

debuginfo 1;
disablebreak;
disablehistory 0xff;
//disableinvert;カーソルキーが表示されなくなるためコメントアウトした。
call main getarg(1);
setsearch $g_old_searchbuffer, #g_old_searchoption;
endmacro;

main:
	/***************************************************
	[注意] ファイル名決め打ち、後で修正。
	****************************************************/
	call Start $$1;
	##ret = ##return;

	//
	//後処理
	//
	call FreeDll;
	call CloseFileIfOpen;
	$$forcus_hidemaru_handle=getstaticvariable("$unity.hidemaruhandle_to_focus_at_end_of_process",1);
	##forcus_hidemaru_handle=val($$forcus_hidemaru_handle);
	if(##forcus_hidemaru_handle!=0){
		setactivehidemaru ##forcus_hidemaru_handle;
	}
	return ##ret;

/*
return	アクションが最後まで実行されたかどうか(bool)
		false	実行された
		true	実行されていない
*/
Start:
	$$source_list	=$$1;
	if($$source_list==""){
		return false;
	}

	setstaticvariable "$unity.hidemaruhandle_to_focus_at_end_of_process",str(0), 1;
	setstaticvariable "$unity.target_hidemaruhandle", str(#g_target_hidemaru), 1;
	call NewFile;
	if(! ##return){
		return false;
	}

	setstaticvariable "$unity.root_macro_directory", $g_root_macro_directory,1;
	setstaticvariable "$unity.is_quit", "1",1;

	call LoadDll;
	if(! ##return){
		return false;
	}
	##n=dllfuncw(#g_dll_ohtorii_tools,"Initialize");
	call LoadKindAll;
	if(! ##return){
		return false;
	}

	{//ソースを読み込む
		##num_source= split($g_sources,$$source_list, "\t");
		##i			= 0;
		debuginfo "##num_source="+str(##num_source);
		while(##i<##num_source){
			$$source_filename=$g_root_macro_directory+"\\sources\\"+$g_sources[##i]+".mac";
			debuginfo"$$g_sources[##i]="+$g_sources[##i];
			execmacro currentmacrodirectory+"\\source.mac", str(#g_dll_ohtorii_tools), $$source_filename, "";
			if(getresultex(-1)=="0"){
				return 0;
			}
			##i = ##i + 1;
		}
	}
	call RefineSearch "", "";
	call FreeDll;
	call CloseFileIfOpen;
	if(! ##return){
		return false;
	}

	return true;


//#region 絞り込み検索
RefineSearch:
	/*
	引数	$$1		ソースのファイル名
		$$2		引数

	return	0 	キャンセル
			1 	確定
			-1	エラー
	*/
	$$source_filename	= $$1;
	$$args				= $$2;

	debuginfo 1;

	//
	//ソースから候補を生成する
	//
	if($$source_filename!=""){
		execmacro currentmacrodirectory+"\\source.mac", str(#g_dll_ohtorii_tools), $$source_filename, $$args;
	}

	//絞り込み検索を行う
	call RefineSearchMain;
	##ret=##return;
	return ##ret;


PushRefineSearch:
	##exist_context_then_delete=true;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"PushContext", ##exist_context_then_delete);
	return ##ret;


PopRefineSearch:
	##exist_context_then_delete=true;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"PopContext", ##exist_context_then_delete);
	return ##ret;


RefineSearchMain:
	/*
	return	0 	キャンセル
			1 	確定
			-1	エラー
	*/
	$$keybord_buffer="";

	execmacro $g_root_macro_directory+"\\..\\command-line\\command-line-internal\\parse_result.mac" , "cursor"		, $$keybord_buffer;
	$$cursor_pos=getresultex(-1);
	execmacro $g_root_macro_directory+"\\..\\command-line\\command-line-internal\\parse_result.mac" , "keybuffer"	, $$keybord_buffer;
	$$key_buffer=getresultex(-1);

	deletecolormarkerall "gather";

	//事前に実行してDLL側のデータを作る。
	call Filter $$key_buffer;

	$$prev_pattern="999";
	##prev_tickcount=0;
	while(true){
		execmacro $g_root_macro_directory+"\\..\\command-line\\command-line-internal\\input-keys.mac", $$key_buffer, $$cursor_pos;
		$$keybord_buffer=getresultex(-1);

		execmacro $g_root_macro_directory+"\\..\\command-line\\command-line-internal\\parse_result.mac" , "keycode"		, $$keybord_buffer;
		$$keycode=getresultex(-1);
		execmacro $g_root_macro_directory+"\\..\\command-line\\command-line-internal\\parse_result.mac" , "cursor"		, $$keybord_buffer;
		$$cursor_pos=getresultex(-1);
		execmacro $g_root_macro_directory+"\\..\\command-line\\command-line-internal\\parse_result.mac" , "keybuffer"	, $$keybord_buffer;
		$$key_buffer=getresultex(-1);

		##ctrl =iskeydown(0x11);
		if($$keycode=="13"){		/*Enter / ctrl-m*/
			##is_quit_old	=val(getstaticvariable("$unity.is_quit",1));
			execmacro currentmacrodirectory+"\\action.mac", str(#g_dll_ohtorii_tools);
			$$search_result	=getresultex(-1);
			##is_quit		=val(getstaticvariable("$unity.is_quit",1));
			//setstaticvariable "$unity.is_quit",str(##is_quit_old),1;	//値を元に戻す
			if($$search_result=="1"){
				//成功
				if(##is_quit){
					return 1;
				}else{
					//画面を更新して再度絞り込み検索を行う。
					call Filter $$key_buffer;
				}
			}else{
				return 0;		//失敗
			}
		}else if($$keycode=="27"){				return 0;}			//Escapeが押された
		else if($$keycode=="16"){				call CursorUp;} 	//ctrl-p
		else if($$keycode=="14"){				call CursorDown;}	//ctrl-n
		else if($$keycode=="18"){				call Mark;} 		//ctrl-space
		else if(##ctrl&&($$keycode=="32")){ 	call Mark;} 		//ctrl-space
		else if($$keycode == "29"){ 			call CursorUp;} 	//[↑]
		else if($$keycode == "31"){ 			call CursorDown;}	//[↓]
		else if($$keycode=="9"){									//tab
			/*	アクションの選択
			*/
			##current_context=dllfuncw(#g_dll_ohtorii_tools,"GetCurrentContext");
			call PushRefineSearch;
			if(##return==false){
				//(Memo)TABを連続で押すとこの処理に入るので無視する。
				continue;
			}
			##is_quit_old	=val(getstaticvariable("$unity.is_quit",1));
			call RefineSearch currentmacrodirectory+"\\generate_action_candidates.mac",str(##current_context);
			##search_result	=##return;
			##is_quit		=val(getstaticvariable("$unity.is_quit",1));
			//setstaticvariable "$unity.is_quit",str(##is_quit_old),1;	//値を元に戻す
			debuginfo 1;
			debuginfo "##is_quit="+getstaticvariable("$unity.is_quit",1);
			call PopRefineSearch;
			if(##return==false){
				return -1;
			}
			if(##search_result==0){
				//キャンセル
				//画面を更新して再度絞り込み検索を行う。
				call Filter $$key_buffer;
			}else if(##search_result==1){
				//成功
				if(##is_quit){
					return 1;
				}else{
					//画面を更新して再度絞り込み検索を行う。
				call Filter $$key_buffer;
				}
			}else{
				//失敗
				return -1;
			}
		}else{
			if(($$prev_pattern != $$key_buffer) && (300<(tickcount-##prev_tickcount))){
				call Filter $$key_buffer;
				$$prev_pattern=$$key_buffer;
				##prev_tickcount=tickcount;
			}
		}
	}
	return -1;


CursorMoveCommon:
	##delta = ##1;
	##next_line_no=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchMoveHidemaruCursorLineNo",lineno,##delta);
	if(##next_line_no == -1){
		return false;
	}
	moveto2 column,##next_line_no;
	##n=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchSetHidemaruLineno",lineno);
	return result;


CursorUp:
	call CursorMoveCommon -1;
	return ##return;


CursorDown:
	call CursorMoveCommon 1;
	return ##return;


Mark:
	//カーソル行に色を塗る
	disabledraw;
	$$marker=getcolormarker(0x0001,"gather");
	if($$marker=="000000FF"){
		//マーク削除
		##ret=dllfunc(#g_dll_ohtorii_tools,"RefineSearchChangeMarked",lineno,false);
		selectline 0;
		deletecolormarker "gather";
		escape;
	}else{
		//マークする
		##ret=dllfunc(#g_dll_ohtorii_tools,"RefineSearchChangeMarked",lineno,true);
		selectline 0;
		colormarker 0x000000ff,-1,-1,0,0x00,"gather";
		escape;
	}

	enabledraw;
	return;


Filter:
	/*絞り込み検索を行う
	*/
	call TrimString $$1;
	$$pattern=$$return;

	##old_lineno=lineno;

	disabledraw;
	selectall;
	//backspace;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchDo",$$pattern);
	insert(dllfuncstrw(#g_dll_ohtorii_tools,"RefineSearchGetResult"));
	call HilightWorld $$pattern;

	//
	//選択行をマークする
	//
	##i = 0;
	##count = dllfuncw(#g_dll_ohtorii_tools,"RefineSearchGetMarkedCount");
	while(##i<##count){
		##selected_lineno = dllfuncw(#g_dll_ohtorii_tools,"RefineSearchConvertSelectedIndexToHidemaruLineno",##i);
		if(0 < ##selected_lineno){
			movetolineno 1, ##selected_lineno;
			selectline 0;
			colormarker 0x000000ff,-1,-1,0,0x00,"gather";
			escape;
		}
		##i = ##i + 1;
	}

	//
	//行位置を維持する対策。
	//
	//まずは、行数が増減するためカーソル位置を前候補の位置に移動する
	moveto2 0,##old_lineno;
	//次に正しい行番号へ移動する。(そのためにdelt=0としている)
	call CursorMoveCommon 0;
	refreshtabstop;
	enabledraw;
	return result;


HilightWorld:
	/*
	検索文字列をハイライト表示する
	*/

	$$search_words=$$1;
	call SearchWordsToHidemaruRegex $$search_words;
	$$regex=$$return;
	setsearch $$regex,0x00000800|0x00000010;
	hilightfound 1;
	return;

SearchWordsToHidemaruRegex:
	/*空白区切りの文字列を秀丸エディタの正規表現に変換する。
	[in]	"hoge 123 .txt"
	[out]	"hoge|123|\.txt"
	*/
	$$word_list=$$1;
	$$escaped=quote($$word_list);
	$$regex = dllfuncstr(#g_hmjre_dll,"ReplaceRegular", "[" + $g_space + "]+", $$escaped, 0, "|", 2);
	return $$regex;

TrimString:
	if($$2==""){
		$$space=$g_space;
	}else{
		$$space=$$2;
	}
	while(1){
	  ##word=strlen($$1);
	  //文字列の先頭に空白文字がある場合、空白文字を削除
	  if(strstr($$space,leftstr($$1,2))!=-1)$$1=rightstr($$1,##word-2);
	  else if(strstr($$space,rightstr($$1,2))!=-1)$$1=leftstr($$1,##word-2);
	  //ここまで全角文字の対処
	  else if(strstr($$space,leftstr($$1,1))!=-1)$$1=rightstr($$1,##word-1);
	  else if(strstr($$space,rightstr($$1,1))!=-1)$$1=leftstr($$1,##word-1);
	  else break;
	}
	return $$1;


//#region 秀丸の編集画面
NewFile:
	newfile;
	if(result==0){
		#g_open_newfile=false;
		return false;
	}
	#g_open_newfile=true;
	#g_new_hidemaru=hidemaruhandle(0);

	/* 折りたたみを表示しない*/
	config "xFoldingTwigBar:0";
	/*見出しバー表示*/
	config "xOutlineBar:1";
	/*行番号表示*/
	config "xShowLineNo:0";
	/*TSVモード*/
	config "xTabMode:0x0001";
	config "xGuideLine:0x00";
	config "xOrikaeshiLine:0";

	return true;

CloseFileIfOpen:
	if(#g_open_newfile){
		setactivehidemaru	#g_target_hidemaru;
		closehidemaruforced #g_new_hidemaru;

		#g_target_hidemaru=0;
		#g_new_hidemaru=0;

		#g_open_newfile=false;
	}
	return true;


//#region Kind
LoadKindAll:
	/*全カインドをDLLへ読み込む*/
	$$kinds[0]="";
	##kinds_num=0;

	$$root = $g_root_macro_directory+"\\kinds\\";
	##n = dllfunc(#g_dengaku_dll,"ENUMFILE",$$root+"*.mac");
	while (1) {
		$$file = dllfuncstr(#g_dengaku_dll,"FINDNEXT");
		if ($$file == "") {
			break;
		}
		$$kinds[##kinds_num]=$$root+$$file;
		##kinds_num = ##kinds_num + 1;
	}

	##n=dllfuncw(#g_dll_ohtorii_tools,"KindsClear");

	##i=0;
	while(##i<##kinds_num){
		execmacro $$kinds[##i],str(#g_dll_ohtorii_tools),"get_property";
		$$kind_name=dllfuncstrw(#g_dll_ohtorii_tools,"KindsCreate",getresultex(-1));
		if($$kind_name==""){
			return false;
		}
		##i = ##i + 1;
	}
	return true;


//#region DLL
LoadDllFuzzy:
	##dll=loaddll(macrodir+"\\"+$$1);
	if(##dll!=0){
		return ##dll;
	}
	##dll=loaddll(hidemarudir+"\\"+$$1);
	if(##dll!=0){
		return ##dll;
	}
	message $$1+" のロードに失敗しました\n「秀丸エディタ・マクロ」のディレクトリに存在するか確認してください";
	return 0;

LoadDll:
	if(platform&0x00080000){
		#g_dll_ohtorii_tools = loaddll($g_root_macro_directory + "\\dll\\ohtorii_tools_x64.dll");
	}else{
		#g_dll_ohtorii_tools = loaddll($g_root_macro_directory + "\\dll\\ohtorii_tools_x86.dll");
	}
	if (#g_dll_ohtorii_tools==0) {
		message "dll\\ohtorii_tools.dllのロードに失敗しました";
		return false;
	}

	call LoadDllFuzzy("HmJre.dll");
	#g_hmjre_dll=##return;
	if(#g_hmjre_dll==0){
		return false;
	}
	call LoadDllFuzzy("DengakuDLL.dll");
	#g_dengaku_dll=##return;
	if(#g_dengaku_dll==0){
		return false;
	}
	return true;


FreeDll:
	if(#g_dll_ohtorii_tools!=0){
		freedll #g_dll_ohtorii_tools;
		#g_dll_ohtorii_tools=0;
	}

	if(#g_hmjre_dll!=0){
		freedll #g_hmjre_dll;
		#g_hmjre_dll=0;
	}

	if(#g_dengaku_dll!=0){
		freedll #g_dengaku_dll;
		#g_dengaku_dll=0;
	}
	return true;


//#region そのた
/*ファイルの新規作成*/
file_new:

	return ;


/*フォルダヒストリ
*/
directory_mru:
	##i=0;
	while(##i<100){
		$$path=getpathhist(##i);
		if($$path==""){
			break;
		}
		insert($$path+"\n");
		##i = ##i + 1;
	}
	return true;

/*タブ一覧
*/
tab:
	/*
	ウインドウモードの時
	未実装

	# タブモードの時
	1: タブグループ
		1.1: foo.txt
		1.2: bar.txt
	2: タブグループ
		2.1: readme.md
		2.2: (無題) *
	*/
	if($$1=="get_candidate_mode"){
		//この関数は文字列を返す
		return "string";
	}else if($$1=="generate_candidate"){
		if(! tabmode){
			return "";
		}
		$$candidate_list="";
		##i 			= 0;
		while( ##i < tabgrouptotal ) {
			##grouptop 		= gettabhandle( true, ##i, 0 );
			$$candidate_list=$$candidate_list+str(##i+1)+": タブグループ\n";
			##j 			= 0;
			while( ##j < tabtotal[##grouptop] ) {
				##handle = gettabhandle( true, ##i, ##j );
				$$candidate_list=$$candidate_list+"\t"+ str(##i+1)+"."+str(##j+1) + ": "+filename2[##handle]+"\n";
				##j = ##j + 1;
			}
			##i = ##i + 1;
		}
		return $$candidate_list;
	}
	return "";

window:
	/*
	ウインドウモード時
	未実装

	タブモード時
	1: foo.txt
	2: bar.txt

	*/
	if($$1=="get_candidate_mode"){
		//この関数は文字列を返す
		return "string";
	}else if($$1=="generate_candidate"){
		if(! tabmode){
			return "";
		}
		$$candidate_list	="";
		##i 				=0;
		##group				=tabgroup[hidemaruhandle(0)];
		while( ##i < tabtotal[##group] ) {
			##tab_handle 	=gettabhandle( false, ##group, ##i );
			$$candidate_list=$$candidate_list+str(##i+1)+": " + filename2[##tab_handle] + "\n";
			##i 			=##i + 1;
		}
		return $$candidate_list;
	}
	return "";
