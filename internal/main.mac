/* Unite-Vimを秀丸エディタへ移植中（まだ動かない）

usage:
	unity.mac root_dir sources options

引数:
	root_dir	unityマクロのルートディレクトリ

	sources 	タブ区切りのソース名
				（例）"file_mru\tprocess"

	options		タブ区切りのオプション
				（例）"-auto-preview\t-foo-option"

*/

#g_tick_prev=tickcount;

/*****************************************************************************
	グローバル変数
*****************************************************************************/
#g_open_newfile = false;
#g_new_hidemaru = 0;
#g_target_hidemaru = hidemaruhandle(0);

/*候補を再取得するソース名

(Ex.) 	$g_reget_sourcenames[0]="file_mru";
		$g_reget_sourcenames[1]="process";
		#g_reget_sourcenames_count=2;
*/
$g_reget_sourcenames[0]="";
#g_reget_sourcenames_count=0;

//DLL
#g_hmjre_dll 	= 0;
#g_dll_ohtorii_tools=0;
#g_dll_hm_process=0;
#g_dll_output_panel=0;


/*****************************************************************************
	その他グローバル変数
*****************************************************************************/
//マクロのルートディレクトリ
$g_root_macro_directory=getarg(0);


/*****************************************************************************
	グローバル変数(const)
*****************************************************************************/
//command-lineへのパス
$g_command_line_path=currentmacrodirectory+"\\3rd_party\\command-line\\command-line-internal";
//空白文字の定義
$g_space = "\r\n\t 　";

//返値
#g_result_cancel		=0;
#g_result_success		=1;
#g_result_continue		=2;
#g_result_quit			=3;
#g_result_faile 		=-1;

//オプション
#g_option_auto_preview=false;
$g_option_auto_preview_context_candidate="";


/*****************************************************************************
	メイン処理
*****************************************************************************/

$g_old_searchbuffer = searchbuffer;
#g_old_searchoption = searchoption;
#g_target_hidemaru  = hidemaruhandle(0);

debuginfo 1;
disablebreak;
disablehistory
				//0x0001 /*ファイルヒストリ*/
				//0x0002 /*フォルダヒストリ*/
				0x0004 | /*検索ヒストリ*/
				0x0008 | /*置換ヒストリ*/
				0x0010 | /*grepファイルヒストリ*/
				0x0020 | /*プログラム実行ヒストリ*/
				0x0040 ; /*クリップボード履歴*/
				//0x0080 | /*/nオプション,またはopenfileのnoaddhistと同じ扱い*/
				//0x0100 ; /*今開いているファイル(自分自身)をヒストリに残さないようにする*/

//disableinvert;カーソルキーが表示されなくなるためコメントアウトした。

call main getarg(1), getarg(2);
setsearch $g_old_searchbuffer, #g_old_searchoption;
endmacro;

main:
	##old_column=column;
	##old_lineno=lineno;

	call ParseOptions $$2;
	call Start $$1;
	##ret = ##return;

	if(#g_dll_ohtorii_tools){
		$$callback_macro_filename	=dllfuncstrw(#g_dll_ohtorii_tools,"GetCallBack_ProcessFinish_MacroFilename");
		$$callback_label			=dllfuncstrw(#g_dll_ohtorii_tools,"GetCallBack_ProcessFinish_LabelName");
		$$callback_args				=dllfuncstrw(#g_dll_ohtorii_tools,"GetCallBack_ProcessFinish_Args");

	}

	//カーソル位置を元に戻す
	moveto2 ##old_column,##old_lineno;

	//
	//後処理
	//
	call FreeDll;
	call CloseFileIfOpen;

	if($$callback_macro_filename!=""){
		execmacro $$callback_macro_filename, $$callback_label, $$callback_args;
	}

	return ##ret;

ParseOptions:
	#g_option_auto_preview=false;//ディフォルト値で初期化
	##num=split($$options,$$1,"\t");
	##i=0;
	while(##i<##num){
		if($$options[##i]=="-auto-preview"){
			#g_option_auto_preview=true;
		}
		##i = ##i + 1;
	}
	return;

/*
return	アクションが最後まで実行されたかどうか(bool)
		false	実行された
		true	実行されていない
*/
Start:
	if(0){
		//debug
		$$source_list="emoji";
	}else{
		$$source_list=$$1;
	}

	if($$source_list==""){
		return false;
	}
	call ShowPerformanceCounter "Start";

	call NewFile;
	if(! ##return){
		return false;
	}
	call ShowPerformanceCounter "NewFile";

	call LoadDll;
	if(! ##return){
		return false;
	}
	call ShowPerformanceCounter "LoadDLL";

	##ret = dllfuncw(#g_dll_ohtorii_tools,"StaticStatusInitialize",#g_target_hidemaru,directory2,$g_root_macro_directory);


	##ret=dllfuncw(#g_dll_ohtorii_tools,"KindsLoadAll",$g_root_macro_directory+"\\kinds\\");
	if(! ##ret){
		return false;
	}
	call ShowPerformanceCounter "LoadKindAll";

	##ret=dllfuncw(#g_dll_ohtorii_tools,"SourcesLoadAll",$g_root_macro_directory+"\\sources\\");
	if(! ##ret){
		return false;
	}
	call ShowPerformanceCounter "LoadSourceAll";

	{//ソースを読み込む
		##num_source= split($$sources,$$source_list, "\t");
		##i			= 0;
		while(##i<##num_source){
			$$source_filename=$g_root_macro_directory+"\\sources\\"+$$sources[##i]+".mac";

			$$args[0]	=str(#g_dll_ohtorii_tools);
			$$args[1]	=str(#g_dll_hm_process) ;
			$$args[2]	=$$source_filename;
			$$args[3]	="";
			$$args[30]	="";
			execmacro currentmacrodirectory+"\\source.mac", $$args, 31;
			if(getresultex(-1) != "1"){
				return 0;
			}
			##i = ##i + 1;
		}
	}
	call ShowPerformanceCounter "ソースの読み込み";

	call RefineSearch "", "";
	return ##return;


//#region 絞り込み検索
RefineSearch:
	/*
	引数	$$1		ソースのファイル名
		$$2		引数

	return	#g_result_*;
	*/
	$$source_filename	= $$1;
	$$source_args		= $$2;

	//
	//ソースから候補を生成する
	//
	if($$source_filename!=""){
		$$args[0]	=str(#g_dll_ohtorii_tools);
		$$args[1]	=str(#g_dll_hm_process) ;
		$$args[2]	=$$source_filename;
		$$args[3]	=$$source_args;
		$$args[30]	="";
		execmacro currentmacrodirectory+"\\source.mac", $$args, 31;
		if(getresultex(-1)!="1"){
			return #g_result_faile;
		}
	}

	//絞り込み検索を行う
	call RefineSearchMain $$source_filename;
	##ret=##return;
	return ##ret;


PushRefineSearch:
	##exist_context_then_delete=true;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"PushContext", ##exist_context_then_delete);
	return ##ret;


PopRefineSearch:
	##exist_context_then_delete=true;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"PopContext", ##exist_context_then_delete);
	return ##ret;


RefineSearchMain:
	/*
	return	#g_result_*;
	*/
	$$keybord_buffer="";

	execmacro $g_command_line_path+"\\parse_result.mac" , "cursor"		, $$keybord_buffer;
	$$cursor_pos=getresultex(-1);
	execmacro $g_command_line_path+"\\parse_result.mac" , "keybuffer"	, $$keybord_buffer;
	$$key_buffer=getresultex(-1);

	deletecolormarkerall "gather";

	//事前に実行してDLL側のデータを作る。
	call Filter $$key_buffer;

	$$prev_pattern="999";
	##candidates_update_interval=20;
	##candidates_update_prev_tickcount=0;

	##hm_process_update_interval=100;
	##hm_process_update_prev_tickcount=0;

	##auto_update_interval=200;
	##auto_update_prev_tickcount=0;

	while(true){
		execmacro $g_command_line_path+"\\input-keys.mac", $$key_buffer, $$cursor_pos;
		$$keybord_buffer=getresultex(-1);
		execmacro $g_command_line_path+"\\parse_result.mac" , "keycode"		, $$keybord_buffer;
		$$keycode=getresultex(-1);
		execmacro $g_command_line_path+"\\parse_result.mac" , "cursor"		, $$keybord_buffer;
		$$cursor_pos=getresultex(-1);
		execmacro $g_command_line_path+"\\parse_result.mac" , "keybuffer"	, $$keybord_buffer;
		$$key_buffer=getresultex(-1);

		##page_up  	=iskeydown(0x21);
		##page_down	=iskeydown(0x22);
		##ctrl 		=iskeydown(0x11);
		if($$keycode=="13"){		/*Enter / ctrl-m*/
			//カーソル位置を保存する
			##old_column=column;
			##old_lineno=lineno;

			call Enter ;
			if(##return==#g_result_continue){
				call Continue $$key_buffer;

				//カーソル位置を元に戻す
				moveto2 ##old_column,##old_lineno;
				call CursorMoveCommon 0;

				continue;
			}
			if(##return==#g_result_quit)	{return #g_result_success;}
			return ##return;
		}else if($$keycode=="27"){			return #g_result_cancel;} //Escapeが押された
		else if($$keycode=="16"){			call CursorUp;} 	//ctrl-p
		else if($$keycode=="14"){			call CursorDown;}	//ctrl-n
		else if($$keycode=="18"){			call Mark;call CursorDown;} 		//ctrl-space
		else if(##ctrl&&($$keycode=="32")){ call Mark;call CursorDown;} 		//ctrl-space
		else if($$keycode == "29"){ 		call CursorUp;} 	//[↑]
		else if($$keycode == "31"){ 		call CursorDown;}	//[↓]
		else if($$keycode=="9"){								//tab
			/*	アクションを選択する */

			//カーソル位置を保存する
			##old_column=column;
			##old_lineno=lineno;

			##current_context=dllfuncw(#g_dll_ohtorii_tools,"GetCurrentContext");
			call NewCandidate currentmacrodirectory+"\\generate_action_candidates.mac",str(##current_context);
			if(##return==#g_result_continue){
				if(! ##return){
					return #g_result_faile;
				}
				call Continue $$key_buffer;

				//カーソル位置を元に戻す
				moveto2 ##old_column,##old_lineno;
				call CursorMoveCommon 0;

				continue;
			}
			if(##return==#g_result_quit)	{return #g_result_success;}
			return ##return;
		}else if(##page_up){					call PageUp;}	//PageUp
		else if(##page_down){					call PageDown;}	//PageDown
		else{
			//候補の更新
			##canged_candidates=dllfuncw(#g_dll_ohtorii_tools,"ClearChangedCandidatesAndReturnPrevStatus");
			if((##canged_candidates) || (($$prev_pattern != $$key_buffer) && (##candidates_update_interval<(tickcount-##candidates_update_prev_tickcount)))){
				##candidates_update_prev_tickcount=tickcount;
				call Filter $$key_buffer;
				$$prev_pattern=$$key_buffer;
			}
			//プロセスの更新
			if(##hm_process_update_interval < (tickcount-##hm_process_update_prev_tickcount)){
				##hm_process_update_prev_tickcount=tickcount;
				call UpdateHmPocess;
			}
		}

		if(#g_option_auto_preview){
			//auto_updateの更新
			if(##auto_update_interval < (tickcount-##auto_update_prev_tickcount)){
				##auto_update_prev_tickcount=tickcount;
				call DoAutoPreview;
			}
		}

		//定期処理を呼び出す
		##ret=dllfuncw(#g_dll_ohtorii_tools,"RecurringTask");
	}
	return #g_result_faile;


Enter:
	/*Enterキーの処理

	return	#g_result_*
	*/
	$$args[0]	=str(#g_dll_ohtorii_tools);
	$$args[1]	=str(#g_dll_hm_process) ;
	$$args[30]	="";
	execmacro currentmacrodirectory+"\\action.mac", $$args, 31;
	if(getresultex(-1) != "1"){
		return #g_result_faile;		//失敗
	}

	//
	//成功
	//

	##is_quit=dllfuncw(#g_dll_ohtorii_tools,"StaticStatusGetIsQuit");
	if(##is_quit){
		return #g_result_quit;
	}

	##is_start=dllfuncw(#g_dll_ohtorii_tools,"StaticStatusEnableIsStart");
	if(##is_start){
		$$source_name=dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetIsStartSourceName");
		$$arg=dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetIsStartArg");
		$$source_filename=dllfuncstrw(#g_dll_ohtorii_tools,"SourcesSourceNameToFileName",$$source_name);
		$$source_filename=$$source_filename+".mac";
		call NewCandidate, $$source_filename, $$arg;
		return ##return;
	}
	return #g_result_continue;


Continue:
	/*画面を更新して再度絞り込み検索を行う。
	$$1 	key_buffer
	*/
	call Filter $$1;
	return ;

NewCandidate:
	/*新規の候補選択
	return	#g_result_quit
			#g_result_faile
			#g_result_continue
	*/
	debuginfo "Enter NewCandidate";
	$$source_filename	=$$1;
	$$source_arg		=$$2;

	debuginfo "  $$source_filename="+$$source_filename;
	debuginfo "  $$source_arg="+$$source_arg;

	call PushRefineSearch;
	if(##return==false){
		//(Memo)TABを連何度も押すとこの処理に入る。とりあえず無視する。
		debuginfo "  [Failed]Push";
		return #g_result_continue;
	}

	call RefineSearch $$source_filename	,$$source_arg;
	##search_result	=##return;
	##is_quit		=dllfuncw(#g_dll_ohtorii_tools,"StaticStatusGetIsQuit");
	call GatherRegetCandidates;

	call PopRefineSearch;
	if(##return==false){
		debuginfo "  [Failed]Pop";
		return #g_result_faile;
	}

	call TryRegetCandidates $$source_arg;
	if(##search_result==#g_result_cancel){
		//キャンセル
		debuginfo "   cancel.";
		return #g_result_continue;
	}
	if(##search_result==#g_result_success){
		//成功
		if(##is_quit){
			debuginfo "    quit";
			return #g_result_quit;
		}
		return #g_result_continue;
	}
	return ##search_result;


/*候補の再取得に必要なソース名を集める*/
GatherRegetCandidates:
	$g_reget_sourcenames[0]="";
	#g_reget_sourcenames_count=dllfuncw(#g_dll_ohtorii_tools,"StaticStatusGetNumberOfSourceNamesForReacquisitionCandidates");
	##i=0;
	while(##i<#g_reget_sourcenames_count){
		$g_reget_sourcenames[##i] = dllfuncstrw(#g_dll_ohtorii_tools,"StaticStatusGetSourceNameForReacquisitionCandidates", ##i);
		##i = ##i + 1;
	}
	##ret=dllfuncw(#g_dll_ohtorii_tools,"StaticStatusClearSourceNamesForReacquisitionCandidates");
	return ;


/*候補の再取得を試みる
*/
TryRegetCandidates:
	debuginfo "==== TryRegetCandidates ====";
	debuginfo "    #g_reget_sourcenames_count="+str(#g_reget_sourcenames_count);
	if(#g_reget_sourcenames_count==0){
		return ;
	}
	$$source_arg=$$1;

	##source_name_index=0;
	while(##source_name_index < #g_reget_sourcenames_count){
		$$reget_source_filename = dllfuncstrw(#g_dll_ohtorii_tools,"SourcesSourceNameToFileName",$g_reget_sourcenames[##source_name_index]) + ".mac";
		$$args[0]	=str(#g_dll_ohtorii_tools);
		$$args[1]	=str(#g_dll_hm_process) ;
		$$args[2]	=$$reget_source_filename;
		$$args[3]	=$$source_arg;
		$$args[30]	="reget";
		execmacro currentmacrodirectory+"\\source.mac", $$args, 31;
		if(getresultex(-1)!="1"){
			return false;
		}

		##source_name_index = ##source_name_index + 1;
	}
	return ;


CursorMoveCommon:
	##delta = ##1;
	##next_line_no=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchMoveHidemaruCursorLineNo",lineno,##delta);
	if(##next_line_no == -1){
		return false;
	}
	//実際にカーソル位置を移動する
	moveto2 column,##next_line_no;

	//秀丸エディタ側の実際のカーソル位置を反映して、
	//DLL側と秀丸エディタ側のカーソル位置を一致させる
	##n=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchSetHidemaruLineno",lineno);
	return result;


CursorUp:
	call CursorMoveCommon -1;
	return ##return;


CursorDown:
	call CursorMoveCommon 1;
	return ##return;

PageUp:
	halfprevpage;
	call CursorMoveCommon 0;
	return;

PageDown:
	halfnextpage;
	call CursorMoveCommon 0;
	return ;

Mark:
	//カーソル行に色を塗る
	disabledraw;
	$$marker=getcolormarker(0x0001,"gather");
	if($$marker=="000000FF"){
		//マーク削除
		##ret=dllfunc(#g_dll_ohtorii_tools,"RefineSearchChangeMarked",lineno,false);
		selectline 0;
		deletecolormarker "gather";
		escape;
	}else{
		//マークする
		##ret=dllfunc(#g_dll_ohtorii_tools,"RefineSearchChangeMarked",lineno,true);
		selectline 0;
		colormarker 0x000000ff,-1,-1,0,0x00,"gather";
		escape;
	}

	enabledraw;
	return;


Filter:
	/*絞り込み検索を行う
	*/
	call TrimString $$1;
	$$pattern=$$return;

	##old_lineno=lineno;

	disabledraw;
	selectall;
	//backspace;
	##ret=dllfuncw(#g_dll_ohtorii_tools,"RefineSearchDo",$$pattern);
	insert(dllfuncstrw(#g_dll_ohtorii_tools,"RefineSearchGetResult"));
	call HilightWorld $$pattern;

	//
	//選択行をマークする
	//
	##i = 0;
	##count = dllfuncw(#g_dll_ohtorii_tools,"RefineSearchGetMarkedCount");
	while(##i<##count){
		##selected_lineno = dllfuncw(#g_dll_ohtorii_tools,"RefineSearchConvertSelectedIndexToHidemaruLineno",##i);
		if(0 < ##selected_lineno){
			movetolineno 1, ##selected_lineno;
			selectline 0;
			colormarker 0x000000ff,-1,-1,0,0x00,"gather";
			escape;
		}
		##i = ##i + 1;
	}

	//
	//行位置を維持する対策。
	//
	//まずは、行数が増減するためカーソル位置を前候補の位置に移動する
	moveto2 0,##old_lineno;

	//次に正しい行番号へ移動する。(そのためにdelta=0としている)
	call CursorMoveCommon 0;
	if(! ##return){
		//処理失敗==ヘッダ部、なので一つ下(delta=1)へ移動する。
		call CursorMoveCommon 1;
	}

	refreshtabstop;
	enabledraw;
	return result;


HilightWorld:
	/*
	検索文字列をハイライト表示する
	*/

	$$search_words=$$1;
	call SearchWordsToHidemaruRegex $$search_words;
	$$regex=$$return;
	setsearch $$regex,0x00000800|0x00000010;
	hilightfound 1;
	return;

SearchWordsToHidemaruRegex:
	/*空白区切りの文字列を秀丸エディタの正規表現に変換する。
	[in]	"hoge 123 .txt"
	[out]	"hoge|123|\.txt"
	*/
	$$word_list=$$1;
	$$escaped=quote($$word_list);
	$$regex = dllfuncstr(#g_hmjre_dll,"ReplaceRegular", "[" + $g_space + "]+", $$escaped, 0, "|", 2);
	return $$regex;

UpdateHmPocess:
	$$text=dllfuncstrw(#g_dll_hm_process,"ReadStandardOutputAll");
	if($$text!=""){
		call AppendTextToOutputPanel $$text;
	}
	$$text=dllfuncstrw(#g_dll_hm_process,"ReadStandardErrorAll");
	if($$text!=""){
		call AppendTextToOutputPanel $$text;
	}
	return ;


DoAutoPreview:
	##first_item_index	= 0;
	$$text=dllfuncstrw(#g_dll_ohtorii_tools,"GetSelectionText",##first_item_index);
	if($$text==""){
		return ;
	}
	if($g_option_auto_preview_context_candidate==$$text){
		return ;
	}

	$$args[0]	=str(#g_dll_ohtorii_tools);
	$$args[1]	=str(#g_dll_hm_process) ;
	$$args[30]	="preview";
	execmacro currentmacrodirectory+"\\action.mac", $$args, 31;
	$g_option_auto_preview_context_candidate=$$text;
	return ;


AppendTextToOutputPanel:
	if(#g_dll_output_panel==0){
		#g_dll_output_panel=loaddll("HmOutputPane.dll");
		if(#g_dll_output_panel==0){
			return false;
		}
	}
	##ret=dllfunc(#g_dll_output_panel,"Output",hidemaruhandle(0),$$1);
	return ##ret;


TrimString:
	if($$2==""){
		$$space=$g_space;
	}else{
		$$space=$$2;
	}
	while(1){
	  ##word=strlen($$1);
	  //文字列の先頭に空白文字がある場合、空白文字を削除
	  if(strstr($$space,leftstr($$1,2))!=-1)$$1=rightstr($$1,##word-2);
	  else if(strstr($$space,rightstr($$1,2))!=-1)$$1=leftstr($$1,##word-2);
	  //ここまで全角文字の対処
	  else if(strstr($$space,leftstr($$1,1))!=-1)$$1=rightstr($$1,##word-1);
	  else if(strstr($$space,rightstr($$1,1))!=-1)$$1=leftstr($$1,##word-1);
	  else break;
	}
	return $$1;


//#region 秀丸の編集画面
NewFile:
	newfile;
	if(result==0){
		#g_open_newfile=false;
		return false;
	}
	if(0){
		//独立したウインドウで起動する
		//主にhilightソース向け
		settabgroup hidemaruhandle(0),-1;
	}

	#g_open_newfile=true;
	#g_new_hidemaru=hidemaruhandle(0);
	if(false){
		/* 折りたたみを表示しない*/
		config "xFoldingTwigBar:0";
		/*行番号表示*/
		config "xShowLineNo:0";
	}
	/*見出しバー表示*/
	config "xOutlineBar:1";
	/*TSVモード*/
	config "xTabMode:0x0001";
	config "xGuideLine:0x00";
	config "xOrikaeshiLine:0";

	//カーソル行の下線やカーソル位置の縦線の描画を有効にします。（V8.90β6以降）
	setcompatiblemode(compatiblemode|0x02000000);

	return true;

CloseFileIfOpen:
	if(#g_open_newfile){
		setactivehidemaru	#g_target_hidemaru;
		closehidemaruforced #g_new_hidemaru;

		#g_target_hidemaru=0;
		#g_new_hidemaru=0;

		#g_open_newfile=false;
	}
	return true;


//#region DLL
LoadDll:
	execmacro currentmacrodirectory+"\\load_ohtorii_tools_dll.mac";
	#g_dll_ohtorii_tools=val(getresultex(-1));
	if (#g_dll_ohtorii_tools==0) {
		return false;
	}

	execmacro currentmacrodirectory+"\\load_hm_process_dll.mac";
	#g_dll_hm_process=val(getresultex(-1));
	if (#g_dll_hm_process==0) {
		return false;
	}

	execmacro currentmacrodirectory+"\\load_dll.mac", "HmJre.dll";
	#g_hmjre_dll=val(getresultex(-1));
	if(#g_hmjre_dll==0){
		return false;
	}
	return true;


FreeDll:
	if(#g_dll_ohtorii_tools!=0){
		freedll #g_dll_ohtorii_tools;
		#g_dll_ohtorii_tools=0;
	}
	if(#g_dll_hm_process!=0){
		##ret = dllfuncw(#g_dll_hm_process,"Finish");
		freedll #g_dll_hm_process;
		#g_dll_hm_process=0;
	}

	if(#g_hmjre_dll!=0){
		freedll #g_hmjre_dll;
		#g_hmjre_dll=0;
	}

	if(#g_dll_output_panel!=0){
		freedll #g_dll_output_panel;
		#g_dll_output_panel=0;
	}
	return true;


//#region そのた
ShowPerformanceCounter:
	##diff=tickcount-#g_tick_prev;
	debuginfo sprintf("[%d]%s",##diff,$$1);
	#g_tick_prev=tickcount;
	return ;

